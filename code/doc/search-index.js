var searchIndex = JSON.parse('{\
"flow_impl":{"doc":"<code>flow_impl</code> is a trait that flow function implementations …","i":[[6,"RunAgain","flow_impl","Implementations should return a value of type <code>RunAgain</code> to …",null,null],[17,"RUN_AGAIN","","Use <code>RUN_AGAIN</code> to indicate that a function can be executed …",null,null],[17,"DONT_RUN_AGAIN","","Use <code>DONT_RUN_AGAIN</code> to indicate that a function should not …",null,null],[8,"Implementation","","An implementation runs with an array of inputs and …",null,null],[10,"run","","The <code>run</code> method is used to execute the implementation",0,[[]]]],"p":[[8,"Implementation"]]},\
"flow_impl_derive":{"doc":"<code>flow_impl_derive</code> is a derive macro that inserts code to …","i":[[24,"FlowImpl","flow_impl_derive","Implement the <code>FlowImpl</code> derive macro",null,null]],"p":[]},\
"flowc":{"doc":"<code>flowc</code> the the \\\"flow compiler\\\" that takes a hierarchical …","i":[[0,"source_arg","flowc","",null,null],[5,"get_output_dir","flowc::source_arg","",null,[[["option",4],["url",3]],[["pathbuf",3],["result",6]]]],[5,"make_writeable","","",null,[[["pathbuf",3]],[["pathbuf",3],["result",6]]]],[0,"lib_build","flowc","",null,null],[5,"build_lib","flowc::lib_build","Build a library from source and generate a manifest for …",null,[[["provider",8],["options",3]],[["result",6],["string",3]]]],[5,"json_manifest_file","","",null,[[["pathbuf",3]],["pathbuf",3]]],[5,"rust_manifest_file","","",null,[[["pathbuf",3]],["pathbuf",3]]],[5,"write_lib_json_manifest","","",null,[[["pathbuf",3],["librarymanifest",3]],["result",6]]],[5,"write_lib_rust_manifest","","",null,[[["pathbuf",3],["librarymanifest",3]],["result",6]]],[5,"compile_implementations","","",null,[[["librarymanifest",3],["provider",8],["options",3]],["result",6]]],[0,"flow_compile","flowc","",null,null],[5,"check_root","flowc::flow_compile","",null,[[["flow",3]]]],[5,"compile_and_execute_flow","","",null,[[["provider",8],["options",3]],[["result",6],["string",3]]]],[5,"get_executable_name","","",null,[[],["string",3]]],[5,"find_executable_path","","",null,[[],[["result",6],["string",3]]]],[5,"execute_flow","","",null,[[["pathbuf",3],["options",3]],[["result",6],["string",3]]]],[3,"Error","flowc","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[11,"from_kind","","Constructs an error from a kind, and generates a …",0,[[["errorkind",4]],["error",3]]],[11,"with_chain","","Constructs a chained error from another error and a kind, …",0,[[],["error",3]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a …",0,[[["box",3],["error",8]],["error",3]]],[11,"kind","","Returns the kind of the error.",0,[[],["errorkind",4]]],[11,"iter","","Iterates over the error chain.",0,[[],["iter",3]]],[11,"backtrace","","Returns the backtrace associated with this error.",0,[[],[["option",4],["backtrace",3]]]],[11,"chain_err","","Extends the error chain with a new entry.",0,[[],["error",3]]],[11,"description","","A short description of the error. This method is …",0,[[]]],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Provider","","",1,null],[13,"Compiler","","",1,null],[13,"Io","","",1,null],[13,"Msg","","A convenient variant for String.",1,null],[11,"description","","A string describing the error kind.",1,[[]]],[8,"ResultExt","","Additional methods for <code>Result</code>, for easy interaction with …",null,null],[10,"chain_err","","If the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …",2,[[],[["error",3],["result",4]]]],[6,"Result","","Convenient wrapper around <code>std::Result</code>.",null,null],[3,"Options","","",null,null],[12,"lib","","",3,null],[12,"url","","",3,null],[12,"flow_args","","",3,null],[12,"dump","","",3,null],[12,"skip_execution","","",3,null],[12,"debug_symbols","","",3,null],[12,"provided_implementations","","",3,null],[12,"output_dir","","",3,null],[12,"stdin_file","","",3,null],[12,"lib_dirs","","",3,null],[5,"main","","",null,[[]]],[5,"set_lib_search_path","","",null,[[],[["simpath",3],["result",6]]]],[5,"run","","",null,[[],[["result",6],["string",3]]]],[5,"get_matches","","",null,[[],["argmatches",3]]],[5,"parse_args","","",null,[[["argmatches",3]],[["result",6],["options",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["errorkind",4]]]],[11,"from","","",1,[[["error",3]]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[["string",3]]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[["string",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"description","","",0,[[]]],[11,"source","","",0,[[],[["error",8],["option",4]]]],[11,"new","","",0,[[["errorkind",4],["state",3]],["error",3]]],[11,"from_kind","","",0,[[]]],[11,"with_chain","","",0,[[]]],[11,"kind","","",0,[[]]],[11,"iter","","",0,[[],["iter",3]]],[11,"chain_err","","",0,[[]]],[11,"backtrace","","",0,[[],[["option",4],["backtrace",3]]]],[11,"extract_backtrace","","",0,[[["error",8]],[["option",4],["internalbacktrace",3]]]]],"p":[[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[3,"Options"]]},\
"flowclib":{"doc":"This is the rust <code>flow</code> Compiler Library. It can be linked …","i":[[0,"deserializers","flowclib","",null,null],[0,"deserializer_helper","flowclib::deserializers","",null,null],[5,"get_deserializer","flowclib::deserializers::deserializer_helper","",null,[[],[["string",3],["result",4],["deserializer",8]]]],[5,"get_accepted_extensions","","",null,[[]]],[5,"get_file_extension","","",null,[[],["option",4]]],[0,"dumper","flowclib","",null,null],[0,"dump_flow","flowclib::dumper","",null,null],[5,"dump_flow","flowclib::dumper::dump_flow","dump a flow definition that has been loaded to a file in …",null,[[["flow",3],["pathbuf",3],["provider",8]],[["result",6],["string",3]]]],[0,"dump_tables","flowclib::dumper","",null,null],[5,"dump_tables","flowclib::dumper::dump_tables","dump a flow\'s compiler tables that were constructed for …",null,[[["generationtables",3],["pathbuf",3]],[["result",6],["string",3]]]],[5,"dump_functions","","dump a flow\'s functions graph as a .dot file to visualize …",null,[[["flow",3],["generationtables",3],["pathbuf",3]],[["result",6],["string",3]]]],[0,"info","flowclib","Info module provides methods to get additional …",null,null],[5,"version","flowclib::info","return the version number of the library as a string of …",null,[[]]],[0,"compiler","flowclib","Compile module that loads flow definition, compiles flows …",null,null],[0,"loader","flowclib::compiler","",null,null],[8,"Deserializer","flowclib::compiler::loader","All deserializers have to implement this trait for …",null,null],[10,"deserialize","","",0,[[["option",4]],[["process",4],["result",6]]]],[10,"name","","",0,[[]]],[8,"Validate","","Many structs in the model implement the <code>Validate</code> method …",null,null],[10,"validate","","",1,[[],["result",6]]],[5,"load","","Load a context process definition from <code>url</code>, recursively …",null,[[["provider",8]],[["process",4],["result",6]]]],[5,"load_metadata","","load library metadata from the given url using the …",null,[[["provider",8]],[["result",6],["metadata",3]]]],[0,"compile","flowclib::compiler","",null,null],[5,"compile","flowclib::compiler::compile","Take a hierarchical flow definition in memory and compile …",null,[[["flow",3]],[["result",6],["generationtables",3]]]],[0,"compile_wasm","flowclib::compiler","",null,null],[5,"compile_supplied_implementations","flowclib::compiler::compile_wasm","For any function that provides an implementation - …",null,[[["generationtables",3]],[["string",3],["result",6]]]],[5,"compile_implementation","","Compile a function provided in rust to wasm and modify …",null,[[["function",3]],["result",6]]],[0,"generator","flowclib","",null,null],[0,"generate","flowclib::generator","",null,null],[3,"GenerationTables","flowclib::generator::generate","",null,null],[12,"connections","","",2,null],[12,"source_routes","","",2,null],[12,"destination_routes","","HashMap from \\\"route of the output of a function\\\" --> …",2,null],[12,"collapsed_connections","","HashMap from \\\"route of the input of a function\\\" --> …",2,null],[12,"functions","","",2,null],[12,"libs","","",2,null],[11,"new","","",2,[[]]],[5,"create_manifest","","",null,[[["flow",3],["generationtables",3]],[["result",6],["manifest",3]]]],[5,"write_flow_manifest","","Generate a manifest for the flow in JSON that can be used …",null,[[["flow",3],["pathbuf",3],["generationtables",3]],[["result",6],["pathbuf",3]]]],[0,"model","flowclib","",null,null],[0,"name","flowclib::model","",null,null],[3,"Name","flowclib::model::name","",null,null],[11,"map","","Map a function over the wrapped value, consuming it in …",3,[[["fnmut",8]]]],[11,"map_ref","","Map a function over the wrapped value without consuming …",3,[[["fnmut",8]]]],[11,"empty","","",3,[[]]],[8,"HasName","","",null,null],[10,"name","","",4,[[],["name",3]]],[10,"alias","","",4,[[],["name",3]]],[0,"datatype","flowclib::model","",null,null],[3,"DataType","flowclib::model::datatype","",null,null],[11,"map","","Map a function over the wrapped value, consuming it in …",5,[[["fnmut",8]]]],[11,"map_ref","","Map a function over the wrapped value without consuming …",5,[[["fnmut",8]]]],[8,"HasDataType","","",null,null],[10,"datatype","","",6,[[],["datatype",3]]],[11,"valid","","",5,[[],["result",6]]],[11,"is_array","","",5,[[]]],[11,"is_generic","","",5,[[]]],[11,"array_of","","Determine if this data type is an array of the other",5,[[]]],[11,"within_array","","Get the data type the array holds",5,[[],["result",6]]],[11,"type_string","","Take a json data value and return the type string for it, …",5,[[["value",4]],["string",3]]],[11,"array_order","","Take a string description of a DataType and determine how …",5,[[],["result",6]]],[0,"route","flowclib::model","",null,null],[3,"Route","flowclib::model::route","",null,null],[12,"0","","",7,null],[11,"map","","Map a function over the wrapped value, consuming it in …",7,[[["fnmut",8]]]],[11,"map_ref","","Map a function over the wrapped value without consuming …",7,[[["fnmut",8]]]],[11,"map_mut","","Map a function over the wrapped value, potentially …",7,[[]]],[4,"RouteType","","",null,null],[13,"Input","","",8,null],[13,"Output","","",8,null],[13,"Internal","","",8,null],[13,"Invalid","","",8,null],[11,"sub_route_of","","<code>sub_route_of</code> returns an Option indicating if <code>self</code> is a …",7,[[["route",3]],[["option",4],["route",3]]]],[11,"insert","","Insert another Route at the front of this Route",7,[[["asref",8]]]],[11,"extend","","Extend a Route by appending another Route to the end, …",7,[[["route",3]]]],[11,"route_type","","",7,[[],["routetype",4]]],[11,"pop","","Return a route that is one level up, such that …",7,[[]]],[11,"without_trailing_array_index","","Return the io route without a trailing number (array …",7,[[]]],[8,"HasRoute","","",null,null],[10,"route","","",9,[[],["route",3]]],[10,"route_mut","","",9,[[],["route",3]]],[8,"SetRoute","","",null,null],[10,"set_routes_from_parent","","",10,[[["route",3]]]],[8,"SetIORoutes","","",null,null],[10,"set_io_routes_from_parent","","",11,[[["iotype",4],["route",3]]]],[0,"function","flowclib::model","",null,null],[3,"Function","flowclib::model::function","",null,null],[12,"inputs","","",12,null],[11,"new","","",12,[[["ioset",6],["string",3],["vec",3],["outputconnection",3],["name",3],["route",3],["option",4]]]],[11,"set_id","","",12,[[]]],[11,"get_id","","",12,[[]]],[11,"set_flow_id","","",12,[[]]],[11,"get_flow_id","","",12,[[]]],[11,"is_impure","","",12,[[]]],[11,"get_inputs","","",12,[[],["ioset",6]]],[11,"get_mut_inputs","","",12,[[],["ioset",6]]],[11,"get_outputs","","",12,[[],["ioset",6]]],[11,"add_output_route","","",12,[[["outputconnection",3]]]],[11,"get_output_connections","","",12,[[],["vec",3]]],[11,"get_implementation","","",12,[[]]],[11,"set_implementation","","",12,[[]]],[11,"get_source_url","","",12,[[]]],[11,"set_source_url","","",12,[[]]],[11,"set_alias","","",12,[[["name",3]]]],[11,"set_lib_reference","","",12,[[["string",3],["option",4]]]],[11,"get_lib_reference","","",12,[[],["option",4]]],[0,"flow","flowclib::model","",null,null],[3,"Flow","flowclib::model::flow","",null,null],[12,"name","","",13,null],[12,"inputs","","",13,null],[12,"outputs","","",13,null],[12,"process_refs","","",13,null],[12,"connections","","",13,null],[12,"description","","",13,null],[12,"version","","",13,null],[12,"authors","","",13,null],[12,"id","","",13,null],[12,"alias","","",13,null],[12,"source_url","","",13,null],[12,"route","","",13,null],[12,"subprocesses","","",13,null],[12,"lib_references","","",13,null],[11,"default_description","","",13,[[],["string",3]]],[11,"default_version","","",13,[[],["string",3]]],[11,"default_authors","","",13,[[],[["vec",3],["string",3]]]],[11,"default_email","","",13,[[],["string",3]]],[11,"set_alias","","",13,[[["name",3]]]],[11,"inputs","","",13,[[],["ioset",6]]],[11,"inputs_mut","","",13,[[],["ioset",6]]],[11,"outputs","","",13,[[],["ioset",6]]],[11,"get_route_and_type","","",13,[[["option",4],["direction",4],["route",3]],[["result",6],["io",3]]]],[11,"build_connections","","",13,[[],["result",6]]],[0,"process","flowclib::model","",null,null],[4,"Process","flowclib::model::process","",null,null],[13,"FlowProcess","","",14,null],[13,"FunctionProcess","","",14,null],[0,"process_reference","flowclib::model","",null,null],[3,"ProcessReference","flowclib::model::process_reference","",null,null],[12,"alias","","",15,null],[12,"source","","",15,null],[12,"initializations","","",15,null],[11,"set_alias","","if the ProcessRef does not specify an alias for the …",15,[[["name",3]]]],[0,"connection","flowclib::model","",null,null],[3,"Connection","flowclib::model::connection","",null,null],[12,"name","","",16,null],[12,"from","","",16,null],[12,"to","","",16,null],[12,"from_io","","",16,null],[12,"to_io","","",16,null],[12,"level","","",16,null],[4,"Direction","","",null,null],[13,"FROM","","",17,null],[13,"TO","","",17,null],[11,"compatible_types","","",16,[[["datatype",3]]]],[0,"io","flowclib::model","",null,null],[4,"IOType","flowclib::model::io","",null,null],[13,"FunctionIO","","",18,null],[13,"FlowInput","","",18,null],[13,"FlowOutput","","",18,null],[3,"IO","","",null,null],[11,"new","","",19,[[["into",8],["into",8],["datatype",3],["route",3]]]],[11,"flow_io","","",19,[[]]],[11,"io_type","","",19,[[],["iotype",4]]],[11,"set_flow_io","","",19,[[["iotype",4]]]],[11,"datatype","","",19,[[],["datatype",3]]],[11,"set_route","","",19,[[["iotype",4],["route",3]]]],[11,"set_datatype","","",19,[[["datatype",3]]]],[11,"get_initializer","","",19,[[],["option",4]]],[11,"set_initializer","","",19,[[["option",4]]]],[6,"IOSet","","",null,null],[8,"Find","","",null,null],[10,"find","","",20,[[["route",3]]]],[10,"find_by_name","","",20,[[["option",4],["name",3]],[["result",6],["io",3]]]],[10,"find_by_route","","",20,[[["option",4],["route",3]],[["result",6],["io",3]]]],[11,"set_initial_values","","",19,[[["ioset",6],["option",4]]]],[3,"Error","flowclib","The Error type.",null,null],[12,"0","","The kind of the error.",21,null],[11,"from_kind","","Constructs an error from a kind, and generates a …",21,[[["errorkind",4]],["error",3]]],[11,"with_chain","","Constructs a chained error from another error and a kind, …",21,[[],["error",3]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a …",21,[[["error",8],["box",3]],["error",3]]],[11,"kind","","Returns the kind of the error.",21,[[],["errorkind",4]]],[11,"iter","","Iterates over the error chain.",21,[[],["iter",3]]],[11,"backtrace","","Returns the backtrace associated with this error.",21,[[],[["option",4],["backtrace",3]]]],[11,"chain_err","","Extends the error chain with a new entry.",21,[[],["error",3]]],[11,"description","","A short description of the error. This method is …",21,[[]]],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Io","","",22,null],[13,"Url","","",22,null],[13,"Msg","","A convenient variant for String.",22,null],[11,"description","","A string describing the error kind.",22,[[]]],[8,"ResultExt","","Additional methods for <code>Result</code>, for easy interaction with …",null,null],[10,"chain_err","","If the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …",23,[[],[["result",4],["error",3]]]],[6,"Result","","Convenient wrapper around <code>std::Result</code>.",null,null],[11,"from","flowclib::generator::generate","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","flowclib::model::name","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","flowclib::model::datatype","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","flowclib::model::route","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","flowclib::model::function","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","flowclib::model::flow","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","flowclib::model::process","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","flowclib::model::process_reference","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","flowclib::model::connection","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","flowclib::model::io","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","flowclib","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"validate","flowclib::model::name","",3,[[],["result",6]]],[11,"validate","flowclib::model::route","",7,[[],["result",6]]],[11,"validate","flowclib::model::function","",12,[[],["result",6]]],[11,"validate","flowclib::model::flow","",13,[[],["result",6]]],[11,"validate","flowclib::model::process_reference","",15,[[],["result",6]]],[11,"validate","flowclib::model::connection","",16,[[],["result",6]]],[11,"validate","flowclib::model::io","",19,[[],["result",6]]],[11,"validate","flowclib","",24,[[],["result",6]]],[11,"name","flowclib::model::function","",12,[[],["name",3]]],[11,"alias","","",12,[[],["name",3]]],[11,"name","flowclib::model::flow","",13,[[],["name",3]]],[11,"alias","","",13,[[],["name",3]]],[11,"name","flowclib::model::process","",14,[[],["name",3]]],[11,"alias","","",14,[[],["name",3]]],[11,"name","flowclib::model::process_reference","",15,[[],["name",3]]],[11,"alias","","",15,[[],["name",3]]],[11,"name","flowclib::model::io","",19,[[],["name",3]]],[11,"alias","","",19,[[],["name",3]]],[11,"datatype","","",19,[[],["datatype",3]]],[11,"route","flowclib::model::function","",12,[[],["route",3]]],[11,"route_mut","","",12,[[],["route",3]]],[11,"route","flowclib::model::flow","",13,[[],["route",3]]],[11,"route_mut","","",13,[[],["route",3]]],[11,"route","flowclib::model::process","",14,[[],["route",3]]],[11,"route_mut","","",14,[[],["route",3]]],[11,"route","flowclib::model::io","",19,[[],["route",3]]],[11,"route_mut","","",19,[[],["route",3]]],[11,"set_routes_from_parent","flowclib::model::function","",12,[[["route",3]]]],[11,"set_routes_from_parent","flowclib::model::flow","",13,[[["route",3]]]],[11,"set_io_routes_from_parent","flowclib","",24,[[["iotype",4],["route",3]]]],[11,"find","","",24,[[["route",3]]]],[11,"find_by_name","","",24,[[["option",4],["name",3]],[["result",6],["io",3]]]],[11,"find_by_route","","",24,[[["option",4],["route",3]],[["result",6],["io",3]]]],[11,"as_mut","flowclib::model::route","",7,[[],["string",3]]],[11,"as_ref","flowclib::model::name","",3,[[],["string",3]]],[11,"as_ref","flowclib::model::datatype","",5,[[],["string",3]]],[11,"as_ref","flowclib::model::route","",7,[[],["string",3]]],[11,"as_ref","","",7,[[]]],[11,"from","flowclib::model::name","",3,[[]]],[11,"from","","",3,[[["string",3]]]],[11,"from","","",3,[[["string",3]]]],[11,"from","","",3,[[["route",3]]]],[11,"from","flowclib::model::datatype","",5,[[]]],[11,"from","flowclib::model::route","",7,[[]]],[11,"from","","",7,[[["string",3]]]],[11,"from","","",7,[[["string",3]]]],[11,"from","","",7,[[["name",3]]]],[11,"from","flowclib","",21,[[["error",3]]]],[11,"from","","",21,[[["parseerror",4]]]],[11,"from","","",21,[[["errorkind",4]]]],[11,"from","","",22,[[["error",3]]]],[11,"from","","",22,[[]]],[11,"from","","",22,[[["string",3]]]],[11,"from","","",21,[[]]],[11,"from","","",21,[[["string",3]]]],[11,"clone","flowclib::model::name","",3,[[],["name",3]]],[11,"clone","flowclib::model::datatype","",5,[[],["datatype",3]]],[11,"clone","flowclib::model::route","",7,[[],["route",3]]],[11,"clone","flowclib::model::function","",12,[[],["function",3]]],[11,"clone","flowclib::model::flow","",13,[[],["flow",3]]],[11,"clone","flowclib::model::process","",14,[[],["process",4]]],[11,"clone","flowclib::model::process_reference","",15,[[],["processreference",3]]],[11,"clone","flowclib::model::connection","",16,[[],["connection",3]]],[11,"clone","flowclib::model::io","",18,[[],["iotype",4]]],[11,"clone","","",19,[[],["io",3]]],[11,"default","flowclib::generator::generate","",2,[[],["generationtables",3]]],[11,"default","flowclib::model::name","",3,[[],["name",3]]],[11,"default","flowclib::model::datatype","",5,[[],["datatype",3]]],[11,"default","flowclib::model::route","",7,[[],["route",3]]],[11,"default","flowclib::model::function","",12,[[],["function",3]]],[11,"default","flowclib::model::flow","",13,[[],["flow",3]]],[11,"default","flowclib::model::process","",14,[[],["process",4]]],[11,"default","flowclib::model::io","",19,[[]]],[11,"eq","flowclib::model::name","",3,[[["name",3]]]],[11,"ne","","",3,[[["name",3]]]],[11,"eq","flowclib::model::datatype","",5,[[["datatype",3]]]],[11,"ne","","",5,[[["datatype",3]]]],[11,"eq","flowclib::model::route","",7,[[["route",3]]]],[11,"ne","","",7,[[["route",3]]]],[11,"eq","flowclib::model::io","",18,[[["iotype",4]]]],[11,"deref","flowclib::model::name","",3,[[]]],[11,"deref","flowclib::model::datatype","",5,[[]]],[11,"deref","flowclib::model::route","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"fmt","flowclib::model::name","",3,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::datatype","",5,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::route","",7,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::function","",12,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::flow","",13,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::process","",14,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::process_reference","",15,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::connection","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::io","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::name","",3,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::datatype","",5,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::route","",7,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::function","",12,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::flow","",13,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::process_reference","",15,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::connection","",16,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib::model::io","",19,[[["formatter",3]],["result",6]]],[11,"fmt","flowclib","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"hash","flowclib::model::name","",3,[[]]],[11,"hash","flowclib::model::datatype","",5,[[]]],[11,"hash","flowclib::model::route","",7,[[]]],[11,"borrow","flowclib::model::name","",3,[[],["string",3]]],[11,"borrow","flowclib::model::datatype","",5,[[],["string",3]]],[11,"borrow","flowclib::model::route","",7,[[],["string",3]]],[11,"borrow_mut","","",7,[[],["string",3]]],[11,"description","flowclib","",21,[[]]],[11,"source","","",21,[[],[["error",8],["option",4]]]],[11,"new","","",21,[[["state",3],["errorkind",4]],["error",3]]],[11,"from_kind","","",21,[[]]],[11,"with_chain","","",21,[[]]],[11,"kind","","",21,[[]]],[11,"iter","","",21,[[],["iter",3]]],[11,"chain_err","","",21,[[]]],[11,"backtrace","","",21,[[],[["option",4],["backtrace",3]]]],[11,"extract_backtrace","","",21,[[["error",8]],[["option",4],["internalbacktrace",3]]]],[11,"serialize","flowclib::generator::generate","",2,[[],["result",4]]],[11,"serialize","flowclib::model::name","",3,[[],["result",4]]],[11,"serialize","flowclib::model::datatype","",5,[[],["result",4]]],[11,"serialize","flowclib::model::route","",7,[[],["result",4]]],[11,"serialize","flowclib::model::function","",12,[[],["result",4]]],[11,"serialize","flowclib::model::flow","",13,[[],["result",4]]],[11,"serialize","flowclib::model::process","",14,[[],["result",4]]],[11,"serialize","flowclib::model::process_reference","",15,[[],["result",4]]],[11,"serialize","flowclib::model::connection","",16,[[],["result",4]]],[11,"serialize","flowclib::model::io","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"deserialize","flowclib::model::name","",3,[[],["result",4]]],[11,"deserialize","flowclib::model::datatype","",5,[[],["result",4]]],[11,"deserialize","flowclib::model::route","",7,[[],["result",4]]],[11,"deserialize","flowclib::model::function","",12,[[],["result",4]]],[11,"deserialize","flowclib::model::flow","",13,[[],["result",4]]],[11,"deserialize","flowclib::model::process","",14,[[],["result",4]]],[11,"deserialize","flowclib::model::process_reference","",15,[[],["result",4]]],[11,"deserialize","flowclib::model::connection","",16,[[],["result",4]]],[11,"deserialize","flowclib::model::io","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]]],"p":[[8,"Deserializer"],[8,"Validate"],[3,"GenerationTables"],[3,"Name"],[8,"HasName"],[3,"DataType"],[8,"HasDataType"],[3,"Route"],[4,"RouteType"],[8,"HasRoute"],[8,"SetRoute"],[8,"SetIORoutes"],[3,"Function"],[3,"Flow"],[4,"Process"],[3,"ProcessReference"],[3,"Connection"],[4,"Direction"],[4,"IOType"],[3,"IO"],[8,"Find"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[6,"IOSet"]]},\
"flowr":{"doc":"#![deny(missing_docs)] <code>flowr</code> is the flow runner. It reads …","i":[[0,"cli_debug_client","flowr","",null,null],[17,"HELP_STRING","flowr::cli_debug_client","",null,null],[3,"CLIDebugClient","","",null,null],[11,"start","","",0,[[["debugclientconnection",3]]]],[11,"help","","",0,[[]]],[11,"parse_command","","",0,[[]]],[11,"get_user_command","","",0,[[],[["result",6],["response",4]]]],[11,"process_event","","",0,[[["event",4]],[["result",6],["response",4]]]],[0,"cli_runtime_client","flowr","",null,null],[3,"CLIRuntimeClient","flowr::cli_runtime_client","",null,null],[12,"args","","",1,null],[12,"image_buffers","","",1,null],[12,"display_metrics","","",1,null],[11,"new","","",1,[[["string",3],["vec",3]]]],[11,"start","","",1,[[["runtimeclientconnection",3],["submission",3],["string",3],["vec",3]],["result",6]]],[11,"process_event","","",1,[[["event",4]],["response",4]]],[3,"Error","flowr","The Error type.",null,null],[12,"0","","The kind of the error.",2,null],[11,"from_kind","","Constructs an error from a kind, and generates a …",2,[[["errorkind",4]],["error",3]]],[11,"with_chain","","Constructs a chained error from another error and a kind, …",2,[[],["error",3]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a …",2,[[["error",8],["box",3]],["error",3]]],[11,"kind","","Returns the kind of the error.",2,[[],["errorkind",4]]],[11,"iter","","Iterates over the error chain.",2,[[],["iter",3]]],[11,"backtrace","","Returns the backtrace associated with this error.",2,[[],[["backtrace",3],["option",4]]]],[11,"chain_err","","Extends the error chain with a new entry.",2,[[],["error",3]]],[11,"description","","A short description of the error. This method is …",2,[[]]],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Provider","","",3,null],[13,"Runtime","","",3,null],[13,"Io","","",3,null],[13,"Msg","","A convenient variant for String.",3,null],[11,"description","","A string describing the error kind.",3,[[]]],[8,"ResultExt","","Additional methods for <code>Result</code>, for easy interaction with …",null,null],[10,"chain_err","","If the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …",4,[[],[["error",3],["result",4]]]],[6,"Result","","Convenient wrapper around <code>std::Result</code>.",null,null],[5,"main","","",null,[[]]],[5,"set_lib_search_path","","",null,[[],[["result",6],["simpath",3]]]],[5,"run","","",null,[[],["result",6]]],[5,"num_threads","","",null,[[["argmatches",3]]]],[5,"num_parallel_jobs","","",null,[[["argmatches",3]]]],[5,"get_matches","","",null,[[],["argmatches",3]]],[5,"parse_flow_url","","",null,[[["argmatches",3]],[["result",6],["url",3]]]],[5,"get_flow_args","","",null,[[["argmatches",3],["url",3]],[["string",3],["vec",3]]]],[11,"from","flowr::cli_debug_client","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","flowr::cli_runtime_client","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","flowr","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",2,[[["error",3]]]],[11,"from","","",2,[[["error",3]]]],[11,"from","","",2,[[["error",3]]]],[11,"from","","",2,[[["errorkind",4]]]],[11,"from","","",3,[[["error",3]]]],[11,"from","","",3,[[]]],[11,"from","","",3,[[["string",3]]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[["string",3]]]],[11,"clone","flowr::cli_runtime_client","",1,[[],["cliruntimeclient",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","flowr","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"description","","",2,[[]]],[11,"source","","",2,[[],[["option",4],["error",8]]]],[11,"new","","",2,[[["errorkind",4],["state",3]],["error",3]]],[11,"from_kind","","",2,[[]]],[11,"with_chain","","",2,[[]]],[11,"kind","","",2,[[]]],[11,"iter","","",2,[[],["iter",3]]],[11,"chain_err","","",2,[[]]],[11,"backtrace","","",2,[[],[["backtrace",3],["option",4]]]],[11,"extract_backtrace","","",2,[[["error",8]],[["option",4],["internalbacktrace",3]]]]],"p":[[3,"CLIDebugClient"],[3,"CLIRuntimeClient"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]},\
"flowrlib":{"doc":"Runtime library for flow execution. This will be linked …","i":[[0,"info","flowrlib","<code>info</code> offers methods to get information about this library",null,null],[5,"version","flowrlib::info","Return the version number of the <code>flowrlib</code> library",null,[[]]],[0,"coordinator","flowrlib","<code>coordinator</code> is the module that coordinates the execution …",null,null],[3,"Submission","flowrlib::coordinator","A Submission is the struct used to send a flow to the …",null,null],[12,"max_parallel_jobs","","",0,null],[12,"job_timeout","","",0,null],[12,"debug","","",0,null],[11,"new","","Create a new <code>Submission</code> of a <code>Flow</code> for execution with the …",0,[[],["submission",3]]],[3,"Coordinator","","The Coordinator is responsible for coordinating the …",null,null],[11,"server","","Start the Coordinator server either in a background …",1,[[["option",4],["simpath",3]],["result",6]]],[11,"start","","Start the Coordinator - this will block the thread it is …",1,[[["simpath",3]],["result",6]]],[0,"loader","flowrlib","<code>loader</code> is responsible for loading a flow from it\'s …",null,null],[3,"Loader","flowrlib::loader","A <code>Loader</code> is responsible for loading a <code>Flow</code> from it\'s …",null,null],[11,"new","","Create a new <code>Loader</code>",2,[[]]],[11,"get_lib_implementations","","",2,[[],["hashmap",3]]],[11,"load_manifest","","Load all the processes defined in a manifest, and then …",2,[[["provider",8]],[["manifest",3],["result",6]]]],[11,"resolve_implementations","","Resolve or \\\"find\\\" all the implementations of functions …",2,[[["provider",8],["manifest",3]],[["string",3],["result",6]]]],[11,"add_lib","","Add a library to the run-time by adding it\'s …",2,[[["provider",8],["librarymanifest",3]],["result",6]]],[0,"client_server","flowrlib","",null,null],[3,"RuntimeClientConnection","flowrlib::client_server","",null,null],[11,"new","","",3,[[["runtimeserverconnection",3]]]],[11,"start","","",3,[[],["result",6]]],[11,"client_recv","","Receive an event from the runtime server",3,[[],[["result",6],["event",4]]]],[11,"client_send","","",3,[[["response",4]],["result",6]]],[3,"DebugClientConnection","","",null,null],[11,"new","","",4,[[["debugserverconnection",3]]]],[11,"start","","",4,[[],["result",6]]],[11,"client_recv","","Receive an Event from the debug server",4,[[],[["result",6],["debugevent",4]]]],[11,"client_send","","Send an Event to the debug server",4,[[["debugresponse",4]],["result",6]]],[3,"RuntimeServerConnection","","",null,null],[11,"new","","",5,[[["option",4]]]],[11,"start","","",5,[[],["result",6]]],[11,"get_response","","",5,[[],[["response",4],["result",6]]]],[11,"send_event","","",5,[[["event",4]],[["response",4],["result",6]]]],[3,"DebugServerConnection","","",null,null],[11,"new","","",6,[[["option",4]]]],[11,"start","","",6,[[],["result",6]]],[11,"get_response","","",6,[[],[["debugresponse",4],["result",6]]]],[11,"send_event","","",6,[[["debugevent",4]],["result",6]]],[0,"debug","flowrlib","\'debug\' defines structs passed between the Server and the …",null,null],[4,"Param","flowrlib::debug","Types of <code>Params</code> used in communications between the …",null,null],[13,"Wildcard","","A \\\"*\\\" style parameter - meaning will depend on the <code>Command</code>…",7,null],[13,"Numeric","","A positive integer was specified",7,null],[13,"Output","","A descriptor for the <code>Output</code> of a <code>Function</code> was specified",7,null],[13,"Input","","A descriptor for the <code>Inout</code> of a <code>Function</code> was specified",7,null],[13,"Block","","A description of a \\\"block\\\" (when one function is blocked …",7,null],[4,"Response","","A debugger Response sent by the debug_client to the debug …",null,null],[13,"Ack","","Acknowledge event processed correctly",8,null],[13,"Breakpoint","","Set a <code>breakpoint</code> - with an optional parameter",8,null],[13,"Continue","","<code>continue</code> execution of the flow",8,null],[13,"Delete","","<code>delete</code> an existing breakpoint - with an optional parameter",8,null],[13,"EnterDebugger","","<code>enter</code> the debugger at the next opportunity the runtime has",8,null],[13,"ExitDebugger","","<code>exit</code> the debugger and runtime",8,null],[13,"Inspect","","<code>inspect</code> the current state",8,null],[13,"List","","<code>list</code> existing breakpoints",8,null],[13,"Print","","<code>print</code> a function or functions state",8,null],[13,"RunReset","","<code>reset</code> flow execution back to the initial state",8,null],[13,"Step","","<code>step</code> forward in flow execution by executing one (default) …",8,null],[13,"GetState","","Get the state of the <code>Flow</code>",8,null],[13,"GetFunctionState","","Get the state of a specific <code>Function</code>",8,null],[13,"Error","","An error on the client side",8,null],[13,"Invalid","","Invalid - used when deserialization goes wrong",8,null],[4,"Event","","A run-time event that the debugger communicates to the …",null,null],[13,"JobCompleted","","A <code>Job</code> ran to completion by a function - includes:  …",9,null],[13,"EnteringDebugger","","Entering the debugger",9,null],[13,"ExitingDebugger","","The debugger/run-time is exiting",9,null],[13,"PriorToSendingJob","","The run-time is about to send a <code>Job</code> for execution - an …",9,null],[13,"BlockBreakpoint","","A breakpoint on a <code>Block</code> between two functions was …",9,null],[13,"DataBreakpoint","","A breakpoint on a <code>Value</code> being sent between two functions …",9,null],[13,"Panic","","A panic occurred executing a <code>Flows</code> <code>Job</code> -  includes the …",9,null],[13,"JobError","","There was an error executing the Job",9,null],[13,"ExecutionStarted","","Execution of the flow has started",9,null],[13,"ExecutionEnded","","Execution of the flow has ended",9,null],[13,"Deadlock","","A check has detected that there is a deadlock between …",9,null],[13,"SendingValue","","A value is being sent from the output of one function to …",9,null],[13,"Error","","An error was detected - includes: A string describing the …",9,null],[13,"Message","","A message for display to the user of the debug_client",9,null],[13,"Resetting","","The run-time is resetting the status back to the initial …",9,null],[13,"WaitingForCommand","","Debugger is blocked waiting for a command before …",9,null],[13,"Invalid","","Invalid - used when deserialization goes wrong",9,null],[0,"runtime","flowrlib","\'runtime\' defines structs passed between the Server and …",null,null],[4,"Event","flowrlib::runtime","A run-time Event sent from the run-time to a …",null,null],[13,"FlowStart","","A flow has started executing",10,null],[13,"FlowEnd","","A flow has stopped executing",10,null],[13,"Stdout","","A String of contents was sent to stdout",10,null],[13,"Stderr","","A String of contents was sent to stderr",10,null],[13,"GetStdin","","A Request to read from Stdin",10,null],[13,"GetLine","","A Request to read a line of characters from Stdin",10,null],[13,"GetArgs","","A Request to get the arguments for the flow",10,null],[13,"Write","","A Request to write a series of bytes to a file",10,null],[13,"PixelWrite","","A Request to write a pixel to an ImageBuffer",10,null],[13,"StdoutEOF","","A Request to snd EOF to Stdout",10,null],[13,"StderrEOF","","A Request to snd EOF to Stderr",10,null],[13,"Invalid","","Invalid - used when deserialization goes wrong",10,null],[4,"Response","","A <code>Response</code> from the runtime_client to the run-time",null,null],[13,"Ack","","Simple acknowledgement",11,null],[13,"Stdin","","A String read from Stdin",11,null],[13,"Line","","A line of text read from Stdin using readline",11,null],[13,"Args","","A Vector of Strings that are the flow\'s arguments",11,null],[13,"Error","","An Error occurred in the runtime_client",11,null],[13,"GetStdinEOF","","EOF was detected on input reading using Stdin",11,null],[13,"GetLineEOF","","EOF was detected on input reading Stdin using Readline",11,null],[13,"ClientExiting","","Client is exiting Event loop",11,null],[13,"ClientSubmission","","A submission from the client for execution",11,null],[13,"EnterDebugger","","Client requests that server enters the ddebugger at the …",11,null],[13,"Invalid","","Invalid - used when deserialization goes wrong",11,null],[0,"metrics","flowrlib","",null,null],[3,"Metrics","flowrlib::metrics","",null,null],[11,"new","","",12,[[]]],[11,"reset","","",12,[[]]],[11,"set_jobs_created","","",12,[[]]],[11,"increment_outputs_sent","","",12,[[]]],[11,"track_max_jobs","","",12,[[]]],[11,"default_start_time","","",12,[[],["instant",3]]],[3,"Error","flowrlib","The Error type.",null,null],[12,"0","","The kind of the error.",13,null],[11,"from_kind","","Constructs an error from a kind, and generates a …",13,[[["errorkind",4]],["error",3]]],[11,"with_chain","","Constructs a chained error from another error and a kind, …",13,[[],["error",3]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a …",13,[[["box",3],["error",8]],["error",3]]],[11,"kind","","Returns the kind of the error.",13,[[],["errorkind",4]]],[11,"iter","","Iterates over the error chain.",13,[[],["iter",3]]],[11,"backtrace","","Returns the backtrace associated with this error.",13,[[],[["backtrace",3],["option",4]]]],[11,"chain_err","","Extends the error chain with a new entry.",13,[[],["error",3]]],[11,"description","","A short description of the error. This method is …",13,[[]]],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Io","","",14,null],[13,"Serde","","",14,null],[13,"Recv","","",14,null],[13,"Provider","","",14,null],[13,"Msg","","A convenient variant for String.",14,null],[11,"description","","A string describing the error kind.",14,[[]]],[8,"ResultExt","","Additional methods for <code>Result</code>, for easy interaction with …",null,null],[10,"chain_err","","If the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …",15,[[],[["error",3],["result",4]]]],[6,"Result","","Convenient wrapper around <code>std::Result</code>.",null,null],[11,"from","flowrlib::coordinator","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","flowrlib::loader","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","flowrlib::client_server","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","flowrlib::debug","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"send","","",8,[[["socket",3]],[["error",4],["result",4]]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"send","","",9,[[["socket",3]],[["error",4],["result",4]]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","flowrlib::runtime","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"send","","",10,[[["socket",3]],[["error",4],["result",4]]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"send","","",11,[[["socket",3]],[["error",4],["result",4]]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","flowrlib::metrics","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"from","flowrlib","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"from","flowrlib::runtime","",10,[[["message",3]]]],[11,"from","","",11,[[["message",3]]]],[11,"from","flowrlib::debug","",9,[[["message",3]]]],[11,"from","","",8,[[["message",3]]]],[11,"from","flowrlib","",13,[[["error",3]]]],[11,"from","","",13,[[["error",3]]]],[11,"from","","",13,[[["recverror",3]]]],[11,"from","","",13,[[["error",3]]]],[11,"from","","",13,[[["errorkind",4]]]],[11,"from","","",14,[[["error",3]]]],[11,"from","","",14,[[]]],[11,"from","","",14,[[["string",3]]]],[11,"from","","",13,[[]]],[11,"from","","",13,[[["string",3]]]],[11,"default","flowrlib::loader","",2,[[],["loader",3]]],[11,"eq","flowrlib::coordinator","",0,[[["submission",3]]]],[11,"ne","","",0,[[["submission",3]]]],[11,"eq","flowrlib::runtime","",11,[[["response",4]]]],[11,"ne","","",11,[[["response",4]]]],[11,"fmt","flowrlib::coordinator","",0,[[["formatter",3]],["result",6]]],[11,"fmt","flowrlib::runtime","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","flowrlib::metrics","",12,[[["formatter",3]],["result",6]]],[11,"fmt","flowrlib","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","flowrlib::metrics","",12,[[["formatter",3]],["result",6]]],[11,"fmt","flowrlib","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"description","","",13,[[]]],[11,"source","","",13,[[],[["error",8],["option",4]]]],[11,"new","","",13,[[["state",3],["errorkind",4]],["error",3]]],[11,"from_kind","","",13,[[]]],[11,"with_chain","","",13,[[]]],[11,"kind","","",13,[[]]],[11,"iter","","",13,[[],["iter",3]]],[11,"chain_err","","",13,[[]]],[11,"backtrace","","",13,[[],[["backtrace",3],["option",4]]]],[11,"extract_backtrace","","",13,[[["error",8]],[["option",4],["internalbacktrace",3]]]],[11,"serialize","flowrlib::coordinator","",0,[[],["result",4]]],[11,"serialize","flowrlib::debug","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","flowrlib::runtime","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","flowrlib::metrics","",12,[[],["result",4]]],[11,"deserialize","flowrlib::coordinator","",0,[[],["result",4]]],[11,"deserialize","flowrlib::debug","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","flowrlib::runtime","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","flowrlib::metrics","",12,[[],["result",4]]]],"p":[[3,"Submission"],[3,"Coordinator"],[3,"Loader"],[3,"RuntimeClientConnection"],[3,"DebugClientConnection"],[3,"RuntimeServerConnection"],[3,"DebugServerConnection"],[4,"Param"],[4,"Response"],[4,"Event"],[4,"Event"],[4,"Response"],[3,"Metrics"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]},\
"flowrstructs":{"doc":"","i":[[0,"lib_manifest","flowrstructs","<code>lib_manifest</code> defines the structs for specifying a …",null,null],[17,"DEFAULT_LIB_JSON_MANIFEST_FILENAME","flowrstructs::lib_manifest","The default name used for a Library  Manifest file if …",null,null],[17,"DEFAULT_LIB_RUST_MANIFEST_FILENAME","","",null,null],[4,"ImplementationLocator","","Used to describe where an implementation can be found, …",null,null],[13,"Native","","A <code>Native</code> implementation is a reference to a trait object …",0,null],[13,"Wasm","","A <code>Wasm</code> implementation is compiled to wasm and loaded to a …",0,null],[3,"LibraryManifest","","<code>LibraryManifest</code> describes the contents of a Library that …",null,null],[12,"metadata","","<code>metadata</code> about a flow with author, version and usual …",1,null],[12,"locators","","the <code>locators</code> map a reference to a function/implementation …",1,null],[11,"new","","Create a new, empty, <code>LibraryManifest</code> with the provided …",1,[[["metadata",3]]]],[11,"load","","<code>load</code> a library from the <code>source</code> url, using the <code>provider</code> to …",1,[[["provider",8]],["result",6]]],[11,"add_to_manifest","","Add a function\'s implementation to the library, …",1,[[]]],[0,"function","flowrstructs","<code>function</code> defines functions that form part of a flow",null,null],[3,"Function","flowrstructs::function","<code>Function</code> contains all the information needed about a …",null,null],[11,"new","","Create a new <code>function</code> with the specified <code>name</code>, <code>route</code>, …",2,[[["string",3],["vec",3],["input",3]]]],[11,"reset","","Reset a <code>Function</code> to initial state. Used by a debugger at …",2,[[]]],[11,"default_implementation","","A default <code>Function</code> - used in deserialization of a <code>Manifest</code>",2,[[],[["arc",3],["implementation",8]]]],[11,"name","","Accessor for a <code>Functions</code> <code>name</code>",2,[[]]],[11,"id","","Accessor for a <code>Functions</code> <code>id</code>",2,[[]]],[11,"get_flow_id","","Accessor for a <code>Functions</code> <code>flow_id</code>",2,[[]]],[11,"init_inputs","","Initialize all of a <code>Functions</code> <code>Inputs</code> - as they may have …",2,[[]]],[11,"implementation_location","","Accessor for a <code>Functions</code> <code>implementation_location</code>",2,[[]]],[11,"send","","write a value to a <code>Function</code>\'s input",2,[[["value",4]]]],[11,"send_iter","","write an array of values to a <code>Function</code>\'s input",2,[[]]],[11,"get_output_connections","","Accessor for a <code>Functions</code> <code>output_connections</code> field",2,[[],["vec",3]]],[11,"get_implementation","","Get a clone of the <code>Functions</code> <code>implementation</code>",2,[[],[["arc",3],["implementation",8]]]],[11,"set_implementation","","Set a <code>Functions</code> <code>implementation</code>",2,[[["arc",3],["implementation",8]]]],[11,"input_count","","Determine if the <code>Functions</code> <code>input</code> number <code>input_number</code> is …",2,[[]]],[11,"input_set_count","","Returns how many inputs sets are available across all the …",2,[[]]],[11,"inputs","","Inspect the values of the <code>inputs</code> of a feature. Only used …",2,[[],["vec",3]]],[11,"take_input_set","","Read the values from the inputs and return them for use …",2,[[],[["vec",3],["result",6]]]],[0,"output_connection","flowrstructs","<code>output_connection</code> defines a struct for a function\'s …",null,null],[4,"Conversion","flowrstructs::output_connection","The <code>Conversion</code> enum defines what type of run-time …",null,null],[13,"WrapAsArray","","",3,null],[13,"ArraySerialize","","",3,null],[3,"OutputConnection","","<code>OutputConnection</code> contains information about a function\'s …",null,null],[12,"subroute","","<code>subroute</code> is the path of the output of a function - used …",4,null],[12,"function_id","","<code>function_id</code> is the id of the destination function of this …",4,null],[12,"io_number","","<code>io_number</code> is the IO number the connection is connected to …",4,null],[12,"flow_id","","<code>flow_id</code> is the flow_id of the target function",4,null],[12,"array_level_serde","","<code>array_order</code> defines how many levels of arrays of …",4,null],[12,"generic","","<code>generic</code> defines if the input accepts generic \\\"Value\\\"s",4,null],[12,"route","","<code>route</code> is the full route to the destination input",4,null],[11,"new","","Create a new <code>OutputConnection</code>",4,[[["string",3],["option",4]]]],[11,"is_generic","","Does the destination IO accept generic \\\"Value\\\" types",4,[[]]],[0,"manifest","flowrstructs","<code>manifest</code> is the struct that specifies the manifest of …",null,null],[17,"DEFAULT_MANIFEST_FILENAME","flowrstructs::manifest","The default name used for a flow Manifest file if none is …",null,null],[3,"MetaData","","<code>MetaData</code> about a <code>flow</code> that will be used in the flow\'s …",null,null],[12,"name","","The human readable <code>name</code> of a <code>flow</code>",5,null],[12,"version","","Semantic versioning version number of the flow",5,null],[12,"description","","A description for humans",5,null],[12,"authors","","The name of the people who authored the flow",5,null],[3,"Cargo","","<code>Cargo</code> meta-data that can be used as a source of meta-data",null,null],[12,"package","","We are only interested in the <code>package</code> part - as a source …",6,null],[3,"Manifest","","A <code>flows</code> <code>Manifest</code> describes it and describes all the …",null,null],[11,"new","","Create a new manifest that can then be added to, and used …",7,[[["metadata",3]]]],[11,"add_function","","Add a run-time Function to the manifest for use in …",7,[[["function",3]]]],[11,"get_functions","","Get the list of functions in this manifest",7,[[],["vec",3]]],[11,"get_metadata","","Get the metadata structure for this manifest",7,[[],["metadata",3]]],[11,"get_lib_references","","get the list of all library references in this manifest",7,[[],["hashset",3]]],[11,"set_lib_references","","set the list of all library references in this manifest",7,[[["hashset",3]]]],[11,"add_lib_reference","","Add a new library reference (the name of a library) into …",7,[[]]],[11,"load","","Load, or Deserialize, a manifest from a <code>source</code> Url using …",7,[[["provider",8]],["result",6]]],[0,"input","flowrstructs","<code>input</code> defines the struct for inputs to functions in a flow",null,null],[4,"InputInitializer","flowrstructs::input","An <code>Input</code> can be initialized in one of two ways with an …",null,null],[13,"Always","","A <code>ConstantInputInitializer</code> initializes an input …",8,null],[13,"Once","","A <code>OneTimeInputInitializer</code> initializes an <code>Input</code> once - at …",8,null],[3,"Input","","An <code>Input</code> to a <code>Function</code>.",null,null],[12,"initializer","","An optional <code>InputInitializer</code> associated with this input",9,null],[11,"new","","Create a new <code>Input</code> with an optional <code>InputInitializer</code>",9,[[["option",4]]]],[11,"reset","","reset the value of an <code>Input</code> - usually only used while …",9,[[]]],[11,"take","","Take first element from the Input",9,[[],[["value",4],["result",6]]]],[11,"init","","Initialize an input with the InputInitializer if it has …",9,[[]]],[11,"push","","Add a value to this <code>Input</code>",9,[[["value",4]]]],[11,"push_array","","Add an array of values to this <code>Input</code>, by pushing them one …",9,[[]]],[11,"count","","Return true if the <code>Input</code> is empty or false otherwise",9,[[]]],[3,"Error","flowrstructs","The Error type.",null,null],[12,"0","","The kind of the error.",10,null],[11,"from_kind","","Constructs an error from a kind, and generates a …",10,[[["errorkind",4]],["error",3]]],[11,"with_chain","","Constructs a chained error from another error and a kind, …",10,[[],["error",3]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a …",10,[[["error",8],["box",3]],["error",3]]],[11,"kind","","Returns the kind of the error.",10,[[],["errorkind",4]]],[11,"iter","","Iterates over the error chain.",10,[[],["iter",3]]],[11,"backtrace","","Returns the backtrace associated with this error.",10,[[],[["option",4],["backtrace",3]]]],[11,"chain_err","","Extends the error chain with a new entry.",10,[[],["error",3]]],[11,"description","","A short description of the error. This method is …",10,[[]]],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Io","","",11,null],[13,"Serde","","",11,null],[13,"Recv","","",11,null],[13,"Provider","","",11,null],[13,"Msg","","A convenient variant for String.",11,null],[11,"description","","A string describing the error kind.",11,[[]]],[8,"ResultExt","","Additional methods for <code>Result</code>, for easy interaction with …",null,null],[10,"chain_err","","If the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …",12,[[],[["result",4],["error",3]]]],[6,"Result","","Convenient wrapper around <code>std::Result</code>.",null,null],[11,"from","flowrstructs::lib_manifest","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","flowrstructs::function","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","flowrstructs::output_connection","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","flowrstructs::manifest","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","flowrstructs::input","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","flowrstructs","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",10,[[["error",3]]]],[11,"from","","",10,[[["error",3]]]],[11,"from","","",10,[[["recverror",3]]]],[11,"from","","",10,[[["error",3]]]],[11,"from","","",10,[[["errorkind",4]]]],[11,"from","","",11,[[["error",3]]]],[11,"from","","",11,[[]]],[11,"from","","",11,[[["string",3]]]],[11,"from","","",10,[[]]],[11,"from","","",10,[[["string",3]]]],[11,"clone","flowrstructs::function","",2,[[],["function",3]]],[11,"clone","flowrstructs::output_connection","",3,[[],["conversion",4]]],[11,"clone","","",4,[[],["outputconnection",3]]],[11,"clone","flowrstructs::manifest","",5,[[],["metadata",3]]],[11,"clone","","",6,[[],["cargo",3]]],[11,"clone","","",7,[[],["manifest",3]]],[11,"clone","flowrstructs::input","",8,[[],["inputinitializer",4]]],[11,"clone","","",9,[[],["input",3]]],[11,"eq","flowrstructs::lib_manifest","",0,[[]]],[11,"eq","","",1,[[]]],[11,"eq","flowrstructs::output_connection","",3,[[["conversion",4]]]],[11,"eq","","",4,[[["outputconnection",3]]]],[11,"ne","","",4,[[["outputconnection",3]]]],[11,"eq","flowrstructs::manifest","",5,[[["metadata",3]]]],[11,"ne","","",5,[[["metadata",3]]]],[11,"eq","","",6,[[["cargo",3]]]],[11,"ne","","",6,[[["cargo",3]]]],[11,"fmt","flowrstructs::output_connection","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","flowrstructs::input","",8,[[["formatter",3]],["result",6]]],[11,"fmt","flowrstructs","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","flowrstructs::function","",2,[[["formatter",3]],["result",6]]],[11,"fmt","flowrstructs::output_connection","",4,[[["formatter",3]],["result",6]]],[11,"fmt","flowrstructs::input","",9,[[["formatter",3]],["result",6]]],[11,"fmt","flowrstructs","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"description","","",10,[[]]],[11,"source","","",10,[[],[["option",4],["error",8]]]],[11,"new","","",10,[[["state",3],["errorkind",4]],["error",3]]],[11,"from_kind","","",10,[[]]],[11,"with_chain","","",10,[[]]],[11,"kind","","",10,[[]]],[11,"iter","","",10,[[],["iter",3]]],[11,"chain_err","","",10,[[]]],[11,"backtrace","","",10,[[],[["option",4],["backtrace",3]]]],[11,"extract_backtrace","","",10,[[["error",8]],[["option",4],["internalbacktrace",3]]]],[11,"serialize","flowrstructs::lib_manifest","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","flowrstructs::function","",2,[[],["result",4]]],[11,"serialize","flowrstructs::output_connection","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","flowrstructs::manifest","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","flowrstructs::input","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"deserialize","flowrstructs::lib_manifest","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","flowrstructs::function","",2,[[],["result",4]]],[11,"deserialize","flowrstructs::output_connection","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","flowrstructs::manifest","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","flowrstructs::input","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]]],"p":[[4,"ImplementationLocator"],[3,"LibraryManifest"],[3,"Function"],[4,"Conversion"],[3,"OutputConnection"],[3,"MetaData"],[3,"Cargo"],[3,"Manifest"],[4,"InputInitializer"],[3,"Input"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]},\
"flowsamples":{"doc":"","i":[[5,"main","flowsamples","",null,[[],["result",6]]],[5,"get_flowr","","",null,[[],[["string",3],["result",6]]]],[5,"run_sample","","",null,[[["path",3]],["result",6]]],[5,"args","","",null,[[["path",3]],[["vec",3],["result",6]]]]],"p":[]},\
"flowstdlib":{"doc":"","i":[[0,"control","flowstdlib","Control functions A Module with functions for controlling …",null,null],[0,"compare_switch","flowstdlib::control","A module with functions to compare data elements and …",null,null],[3,"CompareSwitch","flowstdlib::control::compare_switch","Compare two input values and output different the right …",null,null],[0,"join","flowstdlib::control","A module with functions for joining data",null,null],[3,"Join","flowstdlib::control::join","Control the flow of a piece of data by waiting for a …",null,null],[0,"tap","flowstdlib::control","A module with functions to control the flow of data based …",null,null],[3,"Tap","flowstdlib::control::tap","Control the flow of data (flow or disapear it) based on a …",null,null],[0,"route","flowstdlib::control","A module with functions to route data based on a control …",null,null],[3,"Route","flowstdlib::control::route","Route data to one or another based on a boolean control …",null,null],[0,"select","flowstdlib::control","A module with functions to select data on output on a …",null,null],[3,"Select","flowstdlib::control::select","Select which data to output, based on a boolean control …",null,null],[0,"index","flowstdlib::control","A module with functions to select a value to pass based …",null,null],[3,"Index","flowstdlib::control::index","Pass thru a value based on the index of an item in the …",null,null],[0,"data","flowstdlib","Data functions",null,null],[0,"append","flowstdlib::data","A module that implements String concatenation",null,null],[3,"Append","flowstdlib::data::append","Append two strings",null,null],[0,"accumulate","flowstdlib::data","A module that implements accumulating an array from a …",null,null],[3,"Accumulate","flowstdlib::data::accumulate","Accumulate input values into an array upto the limit …",null,null],[0,"buffer","flowstdlib::data","A module that implements a data buffer",null,null],[3,"Buffer","flowstdlib::data::buffer","Takes a value on it\'s input and sends the same value on …",null,null],[0,"count","flowstdlib::data","A module that counts data passed thru it",null,null],[3,"Count","flowstdlib::data::count","Takes a value on it\'s input and sends the same value on …",null,null],[0,"duplicate","flowstdlib::data","A module that duplicates objects into an array of them",null,null],[3,"Duplicate","flowstdlib::data::duplicate","Takes a value on it\'s input and sends the same value …",null,null],[0,"duplicate_rows","flowstdlib::data","A module that duplicates the rows in an array",null,null],[3,"DuplicateRows","flowstdlib::data::duplicate_rows","Duplicate the rows of a matrix",null,null],[0,"enumerate","flowstdlib::data","A module that enumerates entries of an Array",null,null],[3,"Enumerate","flowstdlib::data::enumerate","Enumerate the elements of an Array",null,null],[0,"info","flowstdlib::data","A module with a function to get info about a Value",null,null],[3,"Info","flowstdlib::data::info","Output info about the input value",null,null],[0,"multiply_row","flowstdlib::data","A module that does matrix row multiplication",null,null],[3,"MultiplyRow","flowstdlib::data::multiply_row","Multiply two matrix rows to a product",null,null],[0,"ordered_split","flowstdlib::data","A module that splits a String into an Array of Strings",null,null],[3,"OrderedSplit","flowstdlib::data::ordered_split","Split a string into (possibly) its parts, based on a …",null,null],[0,"remove","flowstdlib::data","A module that removes elements from an array",null,null],[3,"Remove","flowstdlib::data::remove","Remove a value from a vector of values",null,null],[0,"sort","flowstdlib::data","A module with a function to sort values into an ordered …",null,null],[3,"Sort","flowstdlib::data::sort","Sort an Array of Numbers",null,null],[0,"split","flowstdlib::data","A module that splits a String into an Array of Strings",null,null],[3,"Split","flowstdlib::data::split","Split a string into (possibly) two parts and a possible …",null,null],[0,"transpose","flowstdlib::data","A module with a function for transposing a Matrix",null,null],[3,"Transpose","flowstdlib::data::transpose","Transpose a matricies rows and columns",null,null],[0,"zip","flowstdlib::data","A module that zips two sets of data into a set of tuples …",null,null],[3,"Zip","flowstdlib::data::zip","Takes two arrays of values and produce an array of tuples …",null,null],[0,"fmt","flowstdlib","Formatting functions",null,null],[0,"reverse","flowstdlib::fmt","A module to reverse a <code>String</code>",null,null],[3,"Reverse","flowstdlib::fmt::reverse","Reverse a String",null,null],[0,"to_json","flowstdlib::fmt","A module to convert a <code>String</code> to its <code>Json</code> representation",null,null],[3,"ToJson","flowstdlib::fmt::to_json","Convert a String to Json",null,null],[0,"to_string","flowstdlib::fmt","A module to convert a <code>Json</code> value to a <code>String</code>",null,null],[3,"ToString","flowstdlib::fmt::to_string","Convert an input type to a String",null,null],[0,"img","flowstdlib","Imaging functions",null,null],[0,"format_png","flowstdlib::img","A module with a function to convert a stream of data into …",null,null],[3,"FormatPNG","flowstdlib::img::format_png","Format a series of bytes into a PNG image, for use in …",null,null],[0,"math","flowstdlib","Maths functions",null,null],[0,"compare","flowstdlib::math","A module with functions to compare data elements",null,null],[3,"Compare","flowstdlib::math::compare","Compare two input values and output different boolean …",null,null],[0,"add","flowstdlib::math","A module with a function to add two <code>Numbers</code>",null,null],[3,"Add","flowstdlib::math::add","Add two inputs to produce a new output",null,null],[0,"divide","flowstdlib::math","A module with a function to divide two <code>Numbers</code>",null,null],[3,"Divide","flowstdlib::math::divide","Divide one input by another, producing outputs for the …",null,null],[0,"multiply","flowstdlib::math","A module with a function to multiply two <code>Numbers</code>",null,null],[3,"Multiply","flowstdlib::math::multiply","Multiply one input by another",null,null],[0,"subtract","flowstdlib::math","A module with a function to subtract two <code>Numbers</code>",null,null],[3,"Subtract","flowstdlib::math::subtract","Subtract one input from another to produce a new output",null,null],[0,"sqrt","flowstdlib::math","A module with a function to calculate the sqare root of a …",null,null],[3,"Sqrt","flowstdlib::math::sqrt","Calculate the square root of a number",null,null],[5,"get_manifest","flowstdlib","Return the <code>LibraryManifest</code> for the functions in the …",null,[[],["librarymanifest",3]]],[11,"from","flowstdlib::control::compare_switch","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","flowstdlib::control::join","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","flowstdlib::control::tap","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","flowstdlib::control::route","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","flowstdlib::control::select","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","flowstdlib::control::index","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","flowstdlib::data::append","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","flowstdlib::data::accumulate","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","flowstdlib::data::buffer","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","flowstdlib::data::count","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","flowstdlib::data::duplicate","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"from","flowstdlib::data::duplicate_rows","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"init","","",11,[[]]],[11,"deref","","",11,[[]]],[11,"deref_mut","","",11,[[]]],[11,"drop","","",11,[[]]],[11,"from","flowstdlib::data::enumerate","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"init","","",12,[[]]],[11,"deref","","",12,[[]]],[11,"deref_mut","","",12,[[]]],[11,"drop","","",12,[[]]],[11,"from","flowstdlib::data::info","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"init","","",13,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","","",13,[[]]],[11,"drop","","",13,[[]]],[11,"from","flowstdlib::data::multiply_row","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"init","","",14,[[]]],[11,"deref","","",14,[[]]],[11,"deref_mut","","",14,[[]]],[11,"drop","","",14,[[]]],[11,"from","flowstdlib::data::ordered_split","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"init","","",15,[[]]],[11,"deref","","",15,[[]]],[11,"deref_mut","","",15,[[]]],[11,"drop","","",15,[[]]],[11,"from","flowstdlib::data::remove","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"init","","",16,[[]]],[11,"deref","","",16,[[]]],[11,"deref_mut","","",16,[[]]],[11,"drop","","",16,[[]]],[11,"from","flowstdlib::data::sort","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"init","","",17,[[]]],[11,"deref","","",17,[[]]],[11,"deref_mut","","",17,[[]]],[11,"drop","","",17,[[]]],[11,"from","flowstdlib::data::split","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"init","","",18,[[]]],[11,"deref","","",18,[[]]],[11,"deref_mut","","",18,[[]]],[11,"drop","","",18,[[]]],[11,"from","flowstdlib::data::transpose","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"init","","",19,[[]]],[11,"deref","","",19,[[]]],[11,"deref_mut","","",19,[[]]],[11,"drop","","",19,[[]]],[11,"from","flowstdlib::data::zip","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"init","","",20,[[]]],[11,"deref","","",20,[[]]],[11,"deref_mut","","",20,[[]]],[11,"drop","","",20,[[]]],[11,"from","flowstdlib::fmt::reverse","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"init","","",21,[[]]],[11,"deref","","",21,[[]]],[11,"deref_mut","","",21,[[]]],[11,"drop","","",21,[[]]],[11,"from","flowstdlib::fmt::to_json","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"init","","",22,[[]]],[11,"deref","","",22,[[]]],[11,"deref_mut","","",22,[[]]],[11,"drop","","",22,[[]]],[11,"from","flowstdlib::fmt::to_string","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"init","","",23,[[]]],[11,"deref","","",23,[[]]],[11,"deref_mut","","",23,[[]]],[11,"drop","","",23,[[]]],[11,"from","flowstdlib::img::format_png","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"init","","",24,[[]]],[11,"deref","","",24,[[]]],[11,"deref_mut","","",24,[[]]],[11,"drop","","",24,[[]]],[11,"from","flowstdlib::math::compare","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"init","","",25,[[]]],[11,"deref","","",25,[[]]],[11,"deref_mut","","",25,[[]]],[11,"drop","","",25,[[]]],[11,"from","flowstdlib::math::add","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"init","","",26,[[]]],[11,"deref","","",26,[[]]],[11,"deref_mut","","",26,[[]]],[11,"drop","","",26,[[]]],[11,"from","flowstdlib::math::divide","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"init","","",27,[[]]],[11,"deref","","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"drop","","",27,[[]]],[11,"from","flowstdlib::math::multiply","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"init","","",28,[[]]],[11,"deref","","",28,[[]]],[11,"deref_mut","","",28,[[]]],[11,"drop","","",28,[[]]],[11,"from","flowstdlib::math::subtract","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"init","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"deref_mut","","",29,[[]]],[11,"drop","","",29,[[]]],[11,"from","flowstdlib::math::sqrt","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"init","","",30,[[]]],[11,"deref","","",30,[[]]],[11,"deref_mut","","",30,[[]]],[11,"drop","","",30,[[]]],[11,"fmt","flowstdlib::control::compare_switch","",0,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::control::join","",1,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::control::tap","",2,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::control::route","",3,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::control::select","",4,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::control::index","",5,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::append","",6,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::accumulate","",7,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::buffer","",8,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::count","",9,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::duplicate","",10,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::duplicate_rows","",11,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::enumerate","",12,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::info","",13,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::multiply_row","",14,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::ordered_split","",15,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::remove","",16,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::sort","",17,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::split","",18,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::transpose","",19,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::data::zip","",20,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::fmt::reverse","",21,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::fmt::to_json","",22,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::fmt::to_string","",23,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::img::format_png","",24,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::math::compare","",25,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::math::add","",26,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::math::divide","",27,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::math::multiply","",28,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::math::subtract","",29,[[["formatter",3]],["result",6]]],[11,"fmt","flowstdlib::math::sqrt","",30,[[["formatter",3]],["result",6]]],[11,"run","flowstdlib::control::compare_switch","",0,[[]]],[11,"run","flowstdlib::control::join","",1,[[]]],[11,"run","flowstdlib::control::tap","",2,[[]]],[11,"run","flowstdlib::control::route","",3,[[]]],[11,"run","flowstdlib::control::select","",4,[[]]],[11,"run","flowstdlib::control::index","",5,[[]]],[11,"run","flowstdlib::data::append","",6,[[]]],[11,"run","flowstdlib::data::accumulate","",7,[[]]],[11,"run","flowstdlib::data::buffer","",8,[[]]],[11,"run","flowstdlib::data::count","",9,[[]]],[11,"run","flowstdlib::data::duplicate","",10,[[]]],[11,"run","flowstdlib::data::duplicate_rows","",11,[[]]],[11,"run","flowstdlib::data::enumerate","",12,[[]]],[11,"run","flowstdlib::data::info","",13,[[]]],[11,"run","flowstdlib::data::multiply_row","",14,[[]]],[11,"run","flowstdlib::data::ordered_split","",15,[[]]],[11,"run","flowstdlib::data::remove","",16,[[]]],[11,"run","flowstdlib::data::sort","",17,[[]]],[11,"run","flowstdlib::data::split","",18,[[]]],[11,"run","flowstdlib::data::transpose","",19,[[]]],[11,"run","flowstdlib::data::zip","",20,[[]]],[11,"run","flowstdlib::fmt::reverse","",21,[[]]],[11,"run","flowstdlib::fmt::to_json","",22,[[]]],[11,"run","flowstdlib::fmt::to_string","",23,[[]]],[11,"run","flowstdlib::img::format_png","",24,[[]]],[11,"run","flowstdlib::math::compare","",25,[[]]],[11,"run","flowstdlib::math::add","",26,[[]]],[11,"run","flowstdlib::math::divide","",27,[[]]],[11,"run","flowstdlib::math::multiply","",28,[[]]],[11,"run","flowstdlib::math::subtract","",29,[[]]],[11,"run","flowstdlib::math::sqrt","",30,[[]]]],"p":[[3,"CompareSwitch"],[3,"Join"],[3,"Tap"],[3,"Route"],[3,"Select"],[3,"Index"],[3,"Append"],[3,"Accumulate"],[3,"Buffer"],[3,"Count"],[3,"Duplicate"],[3,"DuplicateRows"],[3,"Enumerate"],[3,"Info"],[3,"MultiplyRow"],[3,"OrderedSplit"],[3,"Remove"],[3,"Sort"],[3,"Split"],[3,"Transpose"],[3,"Zip"],[3,"Reverse"],[3,"ToJson"],[3,"ToString"],[3,"FormatPNG"],[3,"Compare"],[3,"Add"],[3,"Divide"],[3,"Multiply"],[3,"Subtract"],[3,"Sqrt"]]},\
"provider":{"doc":"A module to help parse command line arguments for flow …","i":[[0,"content","provider","Content provider trait. It defines methods for for …",null,null],[0,"provider","provider::content","The Provider trait must be implemented by Providers of …",null,null],[8,"Provider","provider::content::provider","A content provider is responsible with interfacing with …",null,null],[10,"resolve_url","","Take a URL and uses it to determine a url where actual …",0,[[],["result",6]]],[10,"get_contents","","Fetches content from a URL. It resolves the URL …",0,[[],[["vec",3],["result",6]]]],[3,"MetaProvider","","The <code>MetaProvider</code> implements the <code>Provider</code> trait and based …",null,null],[11,"new","","",1,[[["simpath",3]]]],[0,"file_provider","provider::content","The Content Provider for File contents",null,null],[3,"FileProvider","provider::content::file_provider","The <code>FileProvider</code> implements the <code>Provider</code> trait and takes …",null,null],[11,"find_file","","Passed a path to a directory, it searches for a file in …",2,[[["pathbuf",3]],[["result",6],["string",3]]]],[11,"file_by_extensions","","Given a path to a filename, try to find an existing file …",2,[[["pathbuf",3]],[["result",6],["string",3]]]],[0,"args","provider","Help take file/url strings from a command line and …",null,null],[5,"url_from_string","provider::args","Accept an optional string (URL or filename) and from it …",null,[[["option",4],["url",3]],[["result",6],["url",3]]]],[5,"cwd_as_url","","Provide the Current Working Directory (CWD) as a URL …",null,[[],[["result",6],["url",3]]]],[3,"Error","provider","The Error type.",null,null],[12,"0","","The kind of the error.",3,null],[11,"from_kind","","Constructs an error from a kind, and generates a …",3,[[["errorkind",4]],["error",3]]],[11,"with_chain","","Constructs a chained error from another error and a kind, …",3,[[],["error",3]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a …",3,[[["error",8],["box",3]],["error",3]]],[11,"kind","","Returns the kind of the error.",3,[[],["errorkind",4]]],[11,"iter","","Iterates over the error chain.",3,[[],["iter",3]]],[11,"backtrace","","Returns the backtrace associated with this error.",3,[[],[["backtrace",3],["option",4]]]],[11,"chain_err","","Extends the error chain with a new entry.",3,[[],["error",3]]],[11,"description","","A short description of the error. This method is …",3,[[]]],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Io","","",4,null],[13,"Easy","","",4,null],[13,"Msg","","A convenient variant for String.",4,null],[11,"description","","A string describing the error kind.",4,[[]]],[8,"ResultExt","","Additional methods for <code>Result</code>, for easy interaction with …",null,null],[10,"chain_err","","If the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …",5,[[],[["error",3],["result",4]]]],[6,"Result","","Convenient wrapper around <code>std::Result</code>.",null,null],[11,"from","provider::content::provider","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","provider::content::file_provider","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","provider","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"resolve_url","provider::content::provider","Takes a Url with a scheme of \\\"http\\\", \\\"https\\\", \\\"file\\\", or …",1,[[],["result",6]]],[11,"get_contents","","Takes a Url with a scheme of \\\"http\\\", \\\"https\\\" or \\\"file\\\". …",1,[[],[["vec",3],["result",6]]]],[11,"resolve_url","provider::content::file_provider","",2,[[],["result",6]]],[11,"get_contents","","",2,[[],[["vec",3],["result",6]]]],[11,"from","provider","",3,[[["error",3]]]],[11,"from","","",3,[[["error",3]]]],[11,"from","","",3,[[["errorkind",4]]]],[11,"from","","",4,[[["error",3]]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[["string",3]]]],[11,"from","","",3,[[]]],[11,"from","","",3,[[["string",3]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"description","","",3,[[]]],[11,"source","","",3,[[],[["error",8],["option",4]]]],[11,"new","","",3,[[["state",3],["errorkind",4]],["error",3]]],[11,"from_kind","","",3,[[]]],[11,"with_chain","","",3,[[]]],[11,"kind","","",3,[[]]],[11,"iter","","",3,[[],["iter",3]]],[11,"chain_err","","",3,[[]]],[11,"backtrace","","",3,[[],[["backtrace",3],["option",4]]]],[11,"extract_backtrace","","",3,[[["error",8]],[["option",4],["internalbacktrace",3]]]]],"p":[[8,"Provider"],[3,"MetaProvider"],[3,"FileProvider"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);