flow = "sequence"
docs = "sequence.md"

# The number the sequence should start at
[[input]]
name = "start"
type = "number"

# limit of the sequence
[[input]]
name = "limit"
type = "number"

# 'step' is the amount to add each time
[[input]]
name = "step"
type = "number"

# The sequence of numbers we will generate
[[output]]
name = "sequence"
type = "number"

# the last value is output when the sequence ends (may not be == limit if step is not 1)
[[output]]
name = "last"
type = "number"

# For the first time around, pass the start number of the sequence into the "compare" process
[[connection]]
from = "input/start"
to = "compare/right"

[[connection]]
from = "input/limit"
to = "compare/left"

# compare will pass all numbers that are less than the limit on the "right-lte" output
[[process]]
alias = "compare"
source = "lib://flowstdlib/control/compare_switch"

# connect the /right-lte output of compare_switch to the output of this process - the sequence of numbers being generated
[[connection]]
from = "compare/right-lte"
to = "output/sequence"

# while the sequence is running - feed the left value (limit) back around to compare against next time
[[connection]]
from = "compare/left-gt"
to = "compare/left"

# An add process to add one to the last output of the sequence each time, up to the penultimate one
[[process]]
alias = "add"
source = "lib://flowstdlib/math/add"

[[connection]]
from = "input/step"
to = "add/i2"

# Take the last generated number of the sequence and pass it to 'add' to add one to it for the next number
# in the sequence (if less than the limit)
[[connection]]
from = "compare/right-lt"
to = "add/i1"

# After the first iteration, each time take the sum from the adder (i.e. possibly the next number in the sequence)
# and pass it into the compare_switch function to pass it throughâˆ« if it's less than the limit
[[connection]]
from = "add"
to = "compare/right"

# pass the 'step' value to the tap for the loopback
[[connection]]
from = "add/i2"
to = "tap/data"

[[process]]
source = "lib://flowstdlib/control/tap"

# feedback the value, if it's not the last iteration
[[connection]]
from = "tap"
to = "add/i2"

# a comparer to see if this is the last iteration
[[process]]
alias = "last"
source = "lib://flowstdlib/math/compare"

# pass the limit to the comparer each time
[[connection]]
from = "compare/left-gt"
to = "last/right"

# pass the previous value generated to the comparer each time
[[connection]]
from = "compare/right-lt"
to = "last/left"

# pass the result of the comparison to the tap that allows the value to pass or disapear
[[connection]]
from = "last/lt"
to = "tap/control"

# When the compare flow indicates that the number was blocked due to being too large (equal to the limit) then
# we want that to indicate that the sequence is done
[[connection]]
from = "compare/right-gte"
to = "output/last"