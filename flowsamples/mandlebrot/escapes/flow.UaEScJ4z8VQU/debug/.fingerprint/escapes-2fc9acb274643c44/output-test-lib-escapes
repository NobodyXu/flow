{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"escapes.rs","byte_start":827,"byte_end":841,"line_start":39,"line_end":39,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    (result, true)","highlight_start":5,"highlight_end":19}],"label":"expected enum `std::result::Result`, found tuple","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"escapes.rs","byte_start":388,"byte_end":421,"line_start":23,"line_end":23,"column_start":34,"column_end":67,"is_primary":false,"text":[{"text":"fn _escapes(inputs: &[Value]) -> Result<(Option<Value>, RunAgain)> {","highlight_start":34,"highlight_end":67}],"label":"expected `std::result::Result<(std::option::Option<serde_json::Value>, bool), flowcore::errors::Error>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `std::result::Result<(std::option::Option<serde_json::Value>, bool), flowcore::errors::Error>`\n  found tuple `(std::option::Option<serde_json::Value>, bool)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try wrapping the expression in `Ok`","code":null,"level":"help","spans":[{"file_name":"escapes.rs","byte_start":827,"byte_end":827,"line_start":39,"line_end":39,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    (result, true)","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"Ok(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"escapes.rs","byte_start":841,"byte_end":841,"line_start":39,"line_end":39,"column_start":19,"column_end":19,"is_primary":true,"text":[{"text":"    (result, true)","highlight_start":19,"highlight_end":19}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mescapes.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn _escapes(inputs: &[Value]) -> Result<(Option<Value>, RunAgain)> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `std::result::Result<(std::option::Option<serde_json::Value>, bool), flowcore::errors::Error>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    (result, true)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `std::result::Result`, found tuple\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `\u001b[0m\u001b[0m\u001b[1mstd::result::Result<(std::option::Option<serde_json::Value>, bool), flowcore::errors::Error>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m             found tuple `\u001b[0m\u001b[0m\u001b[1m(std::option::Option<serde_json::Value>, bool)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in `Ok`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mOk(\u001b[0m\u001b[0m(result, true)\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m+++\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"escapes.rs","byte_start":1229,"byte_end":1240,"line_start":57,"line_end":57,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let (result, _) = _escapes(&inputs);","highlight_start":13,"highlight_end":24}],"label":"expected enum `std::result::Result`, found tuple","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"escapes.rs","byte_start":1243,"byte_end":1260,"line_start":57,"line_end":57,"column_start":27,"column_end":44,"is_primary":false,"text":[{"text":"        let (result, _) = _escapes(&inputs);","highlight_start":27,"highlight_end":44}],"label":"this expression has type `std::result::Result<(std::option::Option<serde_json::Value>, bool), flowcore::errors::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `std::result::Result<(std::option::Option<serde_json::Value>, bool), flowcore::errors::Error>`\n  found tuple `(_, _)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mescapes.rs:57:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let (result, _) = _escapes(&inputs);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis expression has type `std::result::Result<(std::option::Option<serde_json::Value>, bool), flowcore::errors::Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `std::result::Result`, found tuple\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `\u001b[0m\u001b[0m\u001b[1mstd::result::Result<(std::option::Option<serde_json::Value>, bool), flowcore::errors::Error>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m             found tuple `\u001b[0m\u001b[0m\u001b[1m(_, _)\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0283","explanation":"An implementation cannot be chosen unambiguously because of lack of information.\n\nErroneous code example:\n\n```compile_fail,E0283\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct Impl;\n\nimpl Generator for Impl {\n    fn create() -> u32 { 1 }\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let cont: u32 = Generator::create();\n    // error, impossible to choose one of Generator trait implementation\n    // Should it be Impl or AnotherImpl, maybe something else?\n}\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to use a concrete\ntype:\n\n```\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let gen1 = AnotherImpl::create();\n\n    // if there are multiple methods with same name (different traits)\n    let gen2 = <AnotherImpl as Generator>::create();\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9532,"byte_end":9548,"line_start":278,"line_end":278,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":9,"highlight_end":25}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3605,"byte_end":3626,"line_start":114,"line_end":114,"column_start":44,"column_end":65,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":44,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9058,"byte_end":9091,"line_start":260,"line_end":260,"column_start":30,"column_end":63,"is_primary":false,"text":[{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":30,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3211,"byte_end":3239,"line_start":104,"line_end":104,"column_start":44,"column_end":72,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":44,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1419,"byte_end":1444,"line_start":56,"line_end":56,"column_start":9,"column_end":34,"is_primary":false,"text":[{"text":"        json_internal!($($json)+)","highlight_start":9,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"escapes.rs","byte_start":1133,"byte_end":1162,"line_start":54,"line_end":54,"column_start":27,"column_end":56,"is_primary":false,"text":[{"text":"        let pixel_point = json!([[50, 50], [0.5, 0.5]]);","highlight_start":27,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"json!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1292,"byte_end":1453,"line_start":53,"line_end":58,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json {","highlight_start":1,"highlight_end":20},{"text":"    // Hide distracting implementation details from the generated rustdoc.","highlight_start":1,"highlight_end":75},{"text":"    ($($json:tt)+) => {","highlight_start":1,"highlight_end":24},{"text":"        json_internal!($($json)+)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `{integer}: serde::ser::Serialize` found in the `serde` crate:\n- impl serde::ser::Serialize for i128;\n- impl serde::ser::Serialize for i16;\n- impl serde::ser::Serialize for i32;\n- impl serde::ser::Serialize for i64;\nand 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `serde::ser::Serialize` for `&{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `serde_json::to_value`","code":null,"level":"note","spans":[{"file_name":"escapes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/value/mod.rs","byte_start":28061,"byte_end":28070,"line_start":944,"line_end":944,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    T: Serialize,","highlight_start":8,"highlight_end":17}],"label":"required by this bound in `serde_json::to_value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mescapes.rs:54:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let pixel_point = json!([[50, 50], [0.5, 0.5]]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `{integer}: serde::ser::Serialize` found in the `serde` crate:\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i128;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i16;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i32;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i64;\u001b[0m\n\u001b[0m            and 8 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `serde::ser::Serialize` for `&{integer}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `serde_json::to_value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/value/mod.rs:944:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T: Serialize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `serde_json::to_value`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `json_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0283","explanation":"An implementation cannot be chosen unambiguously because of lack of information.\n\nErroneous code example:\n\n```compile_fail,E0283\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct Impl;\n\nimpl Generator for Impl {\n    fn create() -> u32 { 1 }\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let cont: u32 = Generator::create();\n    // error, impossible to choose one of Generator trait implementation\n    // Should it be Impl or AnotherImpl, maybe something else?\n}\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to use a concrete\ntype:\n\n```\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let gen1 = AnotherImpl::create();\n\n    // if there are multiple methods with same name (different traits)\n    let gen2 = <AnotherImpl as Generator>::create();\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9532,"byte_end":9548,"line_start":278,"line_end":278,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":9,"highlight_end":25}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3800,"byte_end":3821,"line_start":119,"line_end":119,"column_start":44,"column_end":65,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":44,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3570,"byte_end":3639,"line_start":114,"line_end":114,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9058,"byte_end":9091,"line_start":260,"line_end":260,"column_start":30,"column_end":63,"is_primary":false,"text":[{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":30,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3211,"byte_end":3239,"line_start":104,"line_end":104,"column_start":44,"column_end":72,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":44,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1419,"byte_end":1444,"line_start":56,"line_end":56,"column_start":9,"column_end":34,"is_primary":false,"text":[{"text":"        json_internal!($($json)+)","highlight_start":9,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"escapes.rs","byte_start":1133,"byte_end":1162,"line_start":54,"line_end":54,"column_start":27,"column_end":56,"is_primary":false,"text":[{"text":"        let pixel_point = json!([[50, 50], [0.5, 0.5]]);","highlight_start":27,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"json!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1292,"byte_end":1453,"line_start":53,"line_end":58,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json {","highlight_start":1,"highlight_end":20},{"text":"    // Hide distracting implementation details from the generated rustdoc.","highlight_start":1,"highlight_end":75},{"text":"    ($($json:tt)+) => {","highlight_start":1,"highlight_end":24},{"text":"        json_internal!($($json)+)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `{integer}: serde::ser::Serialize` found in the `serde` crate:\n- impl serde::ser::Serialize for i128;\n- impl serde::ser::Serialize for i16;\n- impl serde::ser::Serialize for i32;\n- impl serde::ser::Serialize for i64;\nand 8 more","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `serde::ser::Serialize` for `&{integer}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `serde_json::to_value`","code":null,"level":"note","spans":[{"file_name":"escapes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/value/mod.rs","byte_start":28061,"byte_end":28070,"line_start":944,"line_end":944,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    T: Serialize,","highlight_start":8,"highlight_end":17}],"label":"required by this bound in `serde_json::to_value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mescapes.rs:54:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let pixel_point = json!([[50, 50], [0.5, 0.5]]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `{integer}: serde::ser::Serialize` found in the `serde` crate:\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i128;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i16;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i32;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for i64;\u001b[0m\n\u001b[0m            and 8 more\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `serde::ser::Serialize` for `&{integer}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `serde_json::to_value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/value/mod.rs:944:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T: Serialize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `serde_json::to_value`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `json_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0283","explanation":"An implementation cannot be chosen unambiguously because of lack of information.\n\nErroneous code example:\n\n```compile_fail,E0283\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct Impl;\n\nimpl Generator for Impl {\n    fn create() -> u32 { 1 }\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let cont: u32 = Generator::create();\n    // error, impossible to choose one of Generator trait implementation\n    // Should it be Impl or AnotherImpl, maybe something else?\n}\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to use a concrete\ntype:\n\n```\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let gen1 = AnotherImpl::create();\n\n    // if there are multiple methods with same name (different traits)\n    let gen2 = <AnotherImpl as Generator>::create();\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9532,"byte_end":9548,"line_start":278,"line_end":278,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":9,"highlight_end":25}],"label":"cannot infer type for type `{float}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3605,"byte_end":3626,"line_start":114,"line_end":114,"column_start":44,"column_end":65,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":44,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9058,"byte_end":9091,"line_start":260,"line_end":260,"column_start":30,"column_end":63,"is_primary":false,"text":[{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":30,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3211,"byte_end":3239,"line_start":104,"line_end":104,"column_start":44,"column_end":72,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":44,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3936,"byte_end":3982,"line_start":124,"line_end":124,"column_start":9,"column_end":55,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":9,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3176,"byte_end":3251,"line_start":104,"line_end":104,"column_start":9,"column_end":84,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":9,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9058,"byte_end":9091,"line_start":260,"line_end":260,"column_start":30,"column_end":63,"is_primary":false,"text":[{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":30,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1419,"byte_end":1444,"line_start":56,"line_end":56,"column_start":9,"column_end":34,"is_primary":false,"text":[{"text":"        json_internal!($($json)+)","highlight_start":9,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"escapes.rs","byte_start":1133,"byte_end":1162,"line_start":54,"line_end":54,"column_start":27,"column_end":56,"is_primary":false,"text":[{"text":"        let pixel_point = json!([[50, 50], [0.5, 0.5]]);","highlight_start":27,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"json!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1292,"byte_end":1453,"line_start":53,"line_end":58,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json {","highlight_start":1,"highlight_end":20},{"text":"    // Hide distracting implementation details from the generated rustdoc.","highlight_start":1,"highlight_end":75},{"text":"    ($($json:tt)+) => {","highlight_start":1,"highlight_end":24},{"text":"        json_internal!($($json)+)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `{float}: serde::ser::Serialize` found in the `serde` crate:\n- impl serde::ser::Serialize for f32;\n- impl serde::ser::Serialize for f64;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `serde::ser::Serialize` for `&{float}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `serde_json::to_value`","code":null,"level":"note","spans":[{"file_name":"escapes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/value/mod.rs","byte_start":28061,"byte_end":28070,"line_start":944,"line_end":944,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    T: Serialize,","highlight_start":8,"highlight_end":17}],"label":"required by this bound in `serde_json::to_value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mescapes.rs:54:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let pixel_point = json!([[50, 50], [0.5, 0.5]]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{float}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `{float}: serde::ser::Serialize` found in the `serde` crate:\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for f32;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for f64;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `serde::ser::Serialize` for `&{float}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `serde_json::to_value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/value/mod.rs:944:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T: Serialize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `serde_json::to_value`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `json_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0283","explanation":"An implementation cannot be chosen unambiguously because of lack of information.\n\nErroneous code example:\n\n```compile_fail,E0283\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct Impl;\n\nimpl Generator for Impl {\n    fn create() -> u32 { 1 }\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let cont: u32 = Generator::create();\n    // error, impossible to choose one of Generator trait implementation\n    // Should it be Impl or AnotherImpl, maybe something else?\n}\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to use a concrete\ntype:\n\n```\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let gen1 = AnotherImpl::create();\n\n    // if there are multiple methods with same name (different traits)\n    let gen2 = <AnotherImpl as Generator>::create();\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9532,"byte_end":9548,"line_start":278,"line_end":278,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":9,"highlight_end":25}],"label":"cannot infer type for type `{float}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3800,"byte_end":3821,"line_start":119,"line_end":119,"column_start":44,"column_end":65,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":44,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3570,"byte_end":3639,"line_start":114,"line_end":114,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9058,"byte_end":9091,"line_start":260,"line_end":260,"column_start":30,"column_end":63,"is_primary":false,"text":[{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":30,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3211,"byte_end":3239,"line_start":104,"line_end":104,"column_start":44,"column_end":72,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":44,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3936,"byte_end":3982,"line_start":124,"line_end":124,"column_start":9,"column_end":55,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":9,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":3176,"byte_end":3251,"line_start":104,"line_end":104,"column_start":9,"column_end":84,"is_primary":false,"text":[{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":9,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":9058,"byte_end":9091,"line_start":260,"line_end":260,"column_start":30,"column_end":63,"is_primary":false,"text":[{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":30,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1419,"byte_end":1444,"line_start":56,"line_end":56,"column_start":9,"column_end":34,"is_primary":false,"text":[{"text":"        json_internal!($($json)+)","highlight_start":9,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"escapes.rs","byte_start":1133,"byte_end":1162,"line_start":54,"line_end":54,"column_start":27,"column_end":56,"is_primary":false,"text":[{"text":"        let pixel_point = json!([[50, 50], [0.5, 0.5]]);","highlight_start":27,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"json!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1292,"byte_end":1453,"line_start":53,"line_end":58,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json {","highlight_start":1,"highlight_end":20},{"text":"    // Hide distracting implementation details from the generated rustdoc.","highlight_start":1,"highlight_end":75},{"text":"    ($($json:tt)+) => {","highlight_start":1,"highlight_end":24},{"text":"        json_internal!($($json)+)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"json_internal!","def_site_span":{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/macros.rs","byte_start":1956,"byte_end":9575,"line_start":69,"line_end":280,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! json_internal {","highlight_start":1,"highlight_end":29},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an array [...]. Produces a vec![...]","highlight_start":1,"highlight_end":81},{"text":"    // of the elements.","highlight_start":1,"highlight_end":24},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@array [] $($tt)*)","highlight_start":1,"highlight_end":61},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done with trailing comma.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems,)*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done without trailing comma.","highlight_start":1,"highlight_end":36},{"text":"    (@array [$($elems:expr),*]) => {","highlight_start":1,"highlight_end":37},{"text":"        json_internal_vec![$($elems),*]","highlight_start":1,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `null`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] null $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(null)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `true`.","highlight_start":1,"highlight_end":31},{"text":"    (@array [$($elems:expr,)*] true $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        json_internal!(@array [$($elems,)* json_internal!(true)] $($rest)*)","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is `false`.","highlight_start":1,"highlight_end":32},{"text":"    (@array [$($elems:expr,)*] false $($rest:tt)*) => {","highlight_start":1,"highlight_end":56},{"text":"        json_internal!(@array [$($elems,)* json_internal!(false)] $($rest)*)","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an array.","highlight_start":1,"highlight_end":33},{"text":"    (@array [$($elems:expr,)*] [$($array:tt)*] $($rest:tt)*) => {","highlight_start":1,"highlight_end":66},{"text":"        json_internal!(@array [$($elems,)* json_internal!([$($array)*])] $($rest)*)","highlight_start":1,"highlight_end":84},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is a map.","highlight_start":1,"highlight_end":30},{"text":"    (@array [$($elems:expr,)*] {$($map:tt)*} $($rest:tt)*) => {","highlight_start":1,"highlight_end":64},{"text":"        json_internal!(@array [$($elems,)* json_internal!({$($map)*})] $($rest)*)","highlight_start":1,"highlight_end":82},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next element is an expression followed by comma.","highlight_start":1,"highlight_end":56},{"text":"    (@array [$($elems:expr,)*] $next:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":62},{"text":"        json_internal!(@array [$($elems,)* json_internal!($next),] $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last element is an expression with no trailing comma.","highlight_start":1,"highlight_end":61},{"text":"    (@array [$($elems:expr,)*] $last:expr) => {","highlight_start":1,"highlight_end":48},{"text":"        json_internal!(@array [$($elems,)* json_internal!($last)])","highlight_start":1,"highlight_end":67},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Comma after the most recent element.","highlight_start":1,"highlight_end":44},{"text":"    (@array [$($elems:expr),*] , $($rest:tt)*) => {","highlight_start":1,"highlight_end":52},{"text":"        json_internal!(@array [$($elems,)*] $($rest)*)","highlight_start":1,"highlight_end":55},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Unexpected token after most recent element.","highlight_start":1,"highlight_end":51},{"text":"    (@array [$($elems:expr),*] $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":65},{"text":"        json_unexpected!($unexpected)","highlight_start":1,"highlight_end":38},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // TT muncher for parsing the inside of an object {...}. Each entry is","highlight_start":1,"highlight_end":75},{"text":"    // inserted into the given map variable.","highlight_start":1,"highlight_end":45},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!(@object $map () ($($tt)*) ($($tt)*))","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // We require two copies of the input tokens so that we can match on one","highlight_start":1,"highlight_end":77},{"text":"    // copy and trigger errors on the other copy.","highlight_start":1,"highlight_end":50},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Done.","highlight_start":1,"highlight_end":13},{"text":"    (@object $object:ident () () ()) => {};","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the current entry followed by trailing comma.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) , $($rest:tt)*) => {","highlight_start":1,"highlight_end":76},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"        json_internal!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":68},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Current entry followed by unexpected token.","highlight_start":1,"highlight_end":51},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr) $unexpected:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":89},{"text":"        json_unexpected!($unexpected);","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Insert the last entry without trailing comma.","highlight_start":1,"highlight_end":53},{"text":"    (@object $object:ident [$($key:tt)+] ($value:expr)) => {","highlight_start":1,"highlight_end":61},{"text":"        let _ = $object.insert(($($key)+).into(), $value);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `null`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: null $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(null)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `true`.","highlight_start":1,"highlight_end":29},{"text":"    (@object $object:ident ($($key:tt)+) (: true $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(true)) $($rest)*);","highlight_start":1,"highlight_end":85},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is `false`.","highlight_start":1,"highlight_end":30},{"text":"    (@object $object:ident ($($key:tt)+) (: false $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!(false)) $($rest)*);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an array.","highlight_start":1,"highlight_end":31},{"text":"    (@object $object:ident ($($key:tt)+) (: [$($array:tt)*] $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":89},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!([$($array)*])) $($rest)*);","highlight_start":1,"highlight_end":93},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is a map.","highlight_start":1,"highlight_end":28},{"text":"    (@object $object:ident ($($key:tt)+) (: {$($map:tt)*} $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!({$($map)*})) $($rest)*);","highlight_start":1,"highlight_end":91},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Next value is an expression followed by comma.","highlight_start":1,"highlight_end":54},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr , $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)) , $($rest)*);","highlight_start":1,"highlight_end":89},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Last value is an expression with no trailing comma.","highlight_start":1,"highlight_end":59},{"text":"    (@object $object:ident ($($key:tt)+) (: $value:expr) $copy:tt) => {","highlight_start":1,"highlight_end":72},{"text":"        json_internal!(@object $object [$($key)+] (json_internal!($value)));","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing value for last entry. Trigger a reasonable error message.","highlight_start":1,"highlight_end":73},{"text":"    (@object $object:ident ($($key:tt)+) (:) $copy:tt) => {","highlight_start":1,"highlight_end":60},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Missing colon and value for last entry. Trigger a reasonable error","highlight_start":1,"highlight_end":74},{"text":"    // message.","highlight_start":1,"highlight_end":16},{"text":"    (@object $object:ident ($($key:tt)+) () $copy:tt) => {","highlight_start":1,"highlight_end":59},{"text":"        // \"unexpected end of macro invocation\"","highlight_start":1,"highlight_end":48},{"text":"        json_internal!();","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Misplaced colon. Trigger a reasonable error message.","highlight_start":1,"highlight_end":60},{"text":"    (@object $object:ident () (: $($rest:tt)*) ($colon:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":78},{"text":"        // Takes no arguments so \"no rules expected the token `:`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($colon);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Found a comma inside a key. Trigger a reasonable error message.","highlight_start":1,"highlight_end":71},{"text":"    (@object $object:ident ($($key:tt)*) (, $($rest:tt)*) ($comma:tt $($copy:tt)*)) => {","highlight_start":1,"highlight_end":89},{"text":"        // Takes no arguments so \"no rules expected the token `,`\".","highlight_start":1,"highlight_end":68},{"text":"        json_unexpected!($comma);","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Key is fully parenthesized. This avoids clippy double_parens false","highlight_start":1,"highlight_end":74},{"text":"    // positives because the parenthesization may be necessary here.","highlight_start":1,"highlight_end":69},{"text":"    (@object $object:ident () (($key:expr) : $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":74},{"text":"        json_internal!(@object $object ($key) (: $($rest)*) (: $($rest)*));","highlight_start":1,"highlight_end":76},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Refuse to absorb colon token into key expression.","highlight_start":1,"highlight_end":57},{"text":"    (@object $object:ident ($($key:tt)*) (: $($unexpected:tt)+) $copy:tt) => {","highlight_start":1,"highlight_end":79},{"text":"        json_expect_expr_comma!($($unexpected)+);","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Munch a token into the current key.","highlight_start":1,"highlight_end":43},{"text":"    (@object $object:ident ($($key:tt)*) ($tt:tt $($rest:tt)*) $copy:tt) => {","highlight_start":1,"highlight_end":78},{"text":"        json_internal!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"    // The main implementation.","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // Must be invoked as: json_internal!($($json)+)","highlight_start":1,"highlight_end":53},{"text":"    //////////////////////////////////////////////////////////////////////////","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (null) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Null","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (true) => {","highlight_start":1,"highlight_end":16},{"text":"        $crate::Value::Bool(true)","highlight_start":1,"highlight_end":34},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (false) => {","highlight_start":1,"highlight_end":17},{"text":"        $crate::Value::Bool(false)","highlight_start":1,"highlight_end":35},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([]) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Array(json_internal_vec![])","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ([ $($tt:tt)+ ]) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Array(json_internal!(@array [] $($tt)+))","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({}) => {","highlight_start":1,"highlight_end":14},{"text":"        $crate::Value::Object($crate::Map::new())","highlight_start":1,"highlight_end":50},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ({ $($tt:tt)+ }) => {","highlight_start":1,"highlight_end":26},{"text":"        $crate::Value::Object({","highlight_start":1,"highlight_end":32},{"text":"            let mut object = $crate::Map::new();","highlight_start":1,"highlight_end":49},{"text":"            json_internal!(@object object () ($($tt)+) ($($tt)+));","highlight_start":1,"highlight_end":67},{"text":"            object","highlight_start":1,"highlight_end":19},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Any Serialize type: numbers, strings, struct literals, variables etc.","highlight_start":1,"highlight_end":77},{"text":"    // Must be below every other rule.","highlight_start":1,"highlight_end":39},{"text":"    ($other:expr) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::to_value(&$other).unwrap()","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `{float}: serde::ser::Serialize` found in the `serde` crate:\n- impl serde::ser::Serialize for f32;\n- impl serde::ser::Serialize for f64;","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `serde::ser::Serialize` for `&{float}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `serde_json::to_value`","code":null,"level":"note","spans":[{"file_name":"escapes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/value/mod.rs","byte_start":28061,"byte_end":28070,"line_start":944,"line_end":944,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    T: Serialize,","highlight_start":8,"highlight_end":17}],"label":"required by this bound in `serde_json::to_value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mescapes.rs:54:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let pixel_point = json!([[50, 50], [0.5, 0.5]]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{float}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `{float}: serde::ser::Serialize` found in the `serde` crate:\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for f32;\u001b[0m\n\u001b[0m            - impl serde::ser::Serialize for f64;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `serde::ser::Serialize` for `&{float}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `serde_json::to_value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/andrew/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-1.0.78/src/value/mod.rs:944:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T: Serialize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `serde_json::to_value`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `json_internal` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0283, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0283, E0308.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0283`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0283`.\u001b[0m\n"}
