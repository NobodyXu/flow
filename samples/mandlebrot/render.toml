flow = "render"

[[input]]
name = "filename"
type = "String"

[[input]]
name = "size"
type = "Array/Number"

[[input]]
name = "bounds"
type = "Array/Array/Number"

[[input]]
name = "pixel"
type = "Array/Number" # Workaround

# Convert a pixel coordinates ot a point in the imaginary space
[[process]]
alias = "p2p"
source = "pixel_to_point/pixel_to_point"

# Buffer and Loop back the bounds for each pixel
[[process]]
alias = "buffer_bounds"
source = "lib://flowstdlib/data/buffer"

[[connection]]
from = "input/bounds"
to = "buffer_bounds"

[[connection]]
from = "buffer_bounds"
to = "buffer_bounds"

[[connection]]
from = "buffer_bounds"
to = "p2p/bounds"

# Buffer and Loop back the size for each pixel
[[process]]
alias = "buffer_size"
source = "lib://flowstdlib/data/buffer"

[[connection]]
from = "input/size"
to = "buffer_size"

[[connection]]
from = "buffer_size"
to = "buffer_size"

[[connection]]
from = "buffer_size"
to = "p2p/size"

[[connection]]
from = "input/pixel"
to = "p2p/pixel"

# function to render a pixel in the imaginary space to a value
[[process]]
alias = "p2v"
source = "render_pixel/render_pixel"

# Output of p2p is a [pixel, point] pair -> pass it to render
[[connection]]
from = "p2p"
to = "p2v/pixel_point"

# An image buffer to accumulate the results
[[process]]
alias = "image_buffer"
source = "lib://flowruntime/image/image_buffer"

# connect up the image buffer with filename and size
[[connection]]
from = "input/filename"
to = "image_buffer/filename"
[[connection]]
from = "input/size"
to = "image_buffer/size"

# send each pixel from [pixel, value] pair from p2v to the image buffer
[[connection]]
from = "p2v/pixel_value/0"
to = "image_buffer/pixel"
# send each value from [pixel, value] pair from p2v to the image buffer
[[connection]]
from = "p2v/pixel_value/1"
to = "image_buffer/value"


##### Debug
#[[process]]
#source = "lib://flowruntime/stdio/stdout"

#[[connection]]
#from = "input/filename"
#to = "stdout"
#
#[[connection]]
#from = "input/size"
#to = "stdout"
#
#[[connection]]
#from = "input/bounds"
#to = "stdout"

#[[connection]]
#from = "input/pixel"
#to = "stdout"

