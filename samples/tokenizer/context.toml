flow = "tokenizer"

[[process]] # Read a single line of inputs text into a stringn
source = "lib://flowruntime/stdio/readline"

[[process]] # Split a string on the space (" ") separator
source = "lib://flowstdlib/data/split"
input.separator = { constant = " " }

[[connection]] # Take the inout string and pass it to splitter
from = "readline"
to = "split/string"

[[connection]] # Loop back partial splits to be split further
from = "split/partial"
to = "split/string"

[[process]] # Added to track pending work
source = "lib://flowstdlib/math/add"
input.i2 = { once = 1 }

[[connection]] # Pass the change in amount of work pending to the work counter
from = "split/delta"
to = "add/i1"

[[connection]] # Loop back the sum to accumulate the pending work count
name = "pending-work"
from = "add/sum"
to = "add/i2"

[[process]] # Token counter
source = "lib://flowstdlib/data/count"
input.count = { once = 0 }

[[connection]] # Loop back to count up
name = "token-count"
from = "count/count"
to = "count/count"

[[connection]] # Count the tokens passing thru 'count'
name = "tokens"
from = "split/token"
to = "count/data"

#[[process]] # A Tap to limit output of count until we are done
#source = "lib://flowstdlib/control/tap"
#input.data = { constant = "Done" }

#[[connection]] # Pass the token count to the tap
#name = "token-count"
#from = "count/count"
#to = "tap/data"

#[[connection]] # DEBUG
#name = "token-count"
#from = "count/count"
#to = "stdout"

[[process]] # compare pending work to zero
source = "lib://flowstdlib/math/compare"
input.left = { constant = 0 }

[[connection]] # compare pending work to zero
name = "pending-work"
from = "add/sum"
to = "compare/right"

[[connection]] # Open tap when we are done!
name = "done"
from = "compare/equal"
#to = "tap/control"
to = "stdout"

[[process]] # stdout for showing text
source = "lib://flowruntime/stdio/stdout"

#[[connection]] # output the token count when done
#name = "last-token-count"
#from = "tap"
#to = "stdout"
