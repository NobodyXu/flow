
sources
-------
Provide values (of a given type).
Can be implemented as a static value, or a function
Can be inside a flow or a context.

source: it's name
type: - the data type it produces
value: It can define a static value of one of the specified type so that no function is needed to be implemented
or
function: ?? point to an implementation of the function (that doesn't take any input arguments?)

Functions
---------
the most basic block of implementation at the very bottom (or leaves) of the flow tree....
by definition can be run in parallel, no side effects...
Must be able to be invoked by flow, and implement a defined interface to be able to invoke them and get the results.
Rust or rust ffi to use functions from other languages?

sinks
-----
implementations must be embedded or provided, and probably produce some output to the system it's running on,
but could not, like a /dev/null

A Flow "package" can provide sources and sinks and function implementations.
Core flow itself doesn't provide any?
A number of default ones (using rust std or similar?) could be provided bundled with flow?

data types
----------
by default flow supports the rust types, but a package can provide additional named types (structs) building on
rust ones, or others.... providing the type definitions and functions using them can be compiled.

Context definition
------------------
A context has:

- a name - text

# it may contain zero or one flow:
flow:
     -  name: the name of the flow to display in context
        source: file where to find the flow definition

By definition, nothing enters or leaves the context, at most things flow between the contained flow and sources
and sinks, as defined by the connections.


Flow definition
---------------
A flow has:

- flow: it's name

# a set of inputs and outputs that enter/leave the flow, this must match how it's used in a containing flow or context
- inputs
    - name: - text
      type: - the data type
- outputs
    - name: - text
      type: - the data type


Context and Flow - common elements
-------------------------
# a set of connections between things in this flow, and between things inside it and the inputs and outputs
connections:
    - name: - text
      type: - the data type
      from: where from/"port" of that things
      to: where from/"port" of that things

# a set of sources inside this flow
sources:
    - name:  - text
      source: file where it is described
      type:  - the data type

# a set of sinks inside this flow
sinks:
    - name:  - text
      source: file where it is described
      type:  - the data type


Sources
-------
Source can be a value or a function with no parameters - that provides data of the specified type.

source: it's name
type: - the data type
value: a static value defined here (or in a file??)
function: name of a (built-in / named) function or a pointer to a source file implementing the function?

Sinks
-----

sink: it's name
type: - the data type
function: code or a pointer to a source file implementing the function accepting the data type, and returning some
standard value to indicate success, or flow will report the execution error?

Functions
---------
function: it's name

# a set of inputs and outputs that enter/leave the function, this must match how it's used in a containing flow or context
- inputs
    - name: - text
      type: - the data type
- outputs
    - name: - text
      type: - the data type
