flow = "composites"

[[input]]
name = "limit"
type = "Number"

[[output]]
name = "composites"
type = "Number"

[[output]]
name = "composites-last"
type = "Number"

# Generate a set of divisors from 2 .. SQRT(limit)
[[process]]
alias = "sqrt"
source = "lib://flowstdlib/math/sqrt"

[[connection]]
from = "input/limit"
to = "process/sqrt"

[[process]]
alias = "divisors"
source = "lib://flowstdlib/math/sequence"
input.start = {once = 2}
input.step = {once = 1}

[[connection]]
from = "process/sqrt"
to = "process/divisors/end"

[[process]]
alias = "generate_composites"
source = "generate_composites.toml"

[[connection]]
from = "process/divisors/sequence"
to = "process/generate_composites/start"

[[connection]]
from = "input/limit"
to = "process/generate_composites/limit"

[[connection]]
from = "process/generate_composites/composites"
to = "output/composites"

# accumulate a count of sub-sequences generated so we know when we're done - adding an extra 1
[[process]]
alias = "join"
source = "lib://flowstdlib/control/join"
input.data = { constant = 1 }

[[connection]]
from = "process/generate_composites/subsequence-end"
to = "process/join/control"

[[process]]
alias = "subsequence-count"
source = "lib://flowstdlib/math/add"
input.i1 = { once = 1 }

[[connection]]
from = "process/join"
to = "process/subsequence-count/i2"

[[connection]]
from = "process/subsequence-count"
to = "process/subsequence-count/i1"

# compare the count of subsequences to how many we expect
[[process]]
alias = "compare"
source = "lib://flowstdlib/control/compare_switch"

[[connection]]
from = "process/divisors/last"
to = "process/compare/left"

[[connection]]
from = "process/subsequence-count"
to = "process/compare/right"

[[connection]]
from = "process/compare/equal"
to = "output/composites-last"



